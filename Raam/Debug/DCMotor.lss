
DCMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00802000  00002558  000025ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fb  0080205e  0080205e  0000264a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000264a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008367  00000000  00000000  00002a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e90  00000000  00000000  0000adaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fb9  00000000  00000000  0000ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  00010bf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042ec  00000000  00000000  0001160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002839  00000000  00000000  000158f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  00018131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 01 	jmp	0x388	; 0x388 <__ctors_end>
       4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
       c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      10:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      14:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      18:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      1c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      24:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      28:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      2c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      30:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      34:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      38:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_14>
      3c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      40:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      44:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      48:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      4c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      50:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      54:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      58:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      5c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      60:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      64:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      68:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      6c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      70:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      74:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      78:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      7c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      80:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      84:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      88:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      8c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      90:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      94:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      98:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      9c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      a8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      ac:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      b8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      bc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      c8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      cc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      d8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      dc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      e8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      ec:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      f8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
      fc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     100:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     104:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     108:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     10c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     110:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     114:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     118:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     11c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     120:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     124:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     128:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     12c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     130:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     134:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     138:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     13c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     140:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     144:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     148:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     14c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     150:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     154:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     158:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     15c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     160:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     164:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     168:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     16c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     170:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     174:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     178:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     17c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     180:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     184:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     188:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     18c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     190:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     194:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     198:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     19c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1a0:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_104>
     1a4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1a8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1ac:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1b8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1bc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1c8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1cc:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1d8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1dc:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_119>
     1e0:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_120>
     1e4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1e8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1ec:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f0:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f4:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1f8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <nrfReadPayload+0x78>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__trampolines_start>:
     27e:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <uartF0_fgetc>
     282:	0c 94 0e 08 	jmp	0x101c	; 0x101c <uartF0_fputc>

00000286 <__trampolines_end>:
     286:	6e 61       	ori	r22, 0x1E	; 30
     288:	6e 00       	.word	0x006e	; ????

0000028a <__c.2332>:
     28a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     29a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2aa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ba:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2ca:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2da:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ea:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2fa:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     30a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     31a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     32a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     33a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     34a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     35a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     36a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     37a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000388 <__ctors_end>:
     388:	11 24       	eor	r1, r1
     38a:	1f be       	out	0x3f, r1	; 63
     38c:	cf ef       	ldi	r28, 0xFF	; 255
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df e5       	ldi	r29, 0x5F	; 95
     392:	de bf       	out	0x3e, r29	; 62
     394:	00 e0       	ldi	r16, 0x00	; 0
     396:	0c bf       	out	0x3c, r16	; 60

00000398 <__do_copy_data>:
     398:	10 e2       	ldi	r17, 0x20	; 32
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	e8 e5       	ldi	r30, 0x58	; 88
     3a0:	f5 e2       	ldi	r31, 0x25	; 37
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	ae 35       	cpi	r26, 0x5E	; 94
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>

000003b2 <__do_clear_bss>:
     3b2:	21 e2       	ldi	r18, 0x21	; 33
     3b4:	ae e5       	ldi	r26, 0x5E	; 94
     3b6:	b0 e2       	ldi	r27, 0x20	; 32
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <.do_clear_bss_start>

000003ba <.do_clear_bss_loop>:
     3ba:	1d 92       	st	X+, r1

000003bc <.do_clear_bss_start>:
     3bc:	a9 35       	cpi	r26, 0x59	; 89
     3be:	b2 07       	cpc	r27, r18
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <.do_clear_bss_loop>
     3c2:	0e 94 bf 02 	call	0x57e	; 0x57e <main>
     3c6:	0c 94 aa 12 	jmp	0x2554	; 0x2554 <_exit>

000003ca <__bad_interrupt>:
     3ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ce <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |                   // Select frequency range
     3ce:	e0 e5       	ldi	r30, 0x50	; 80
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	8b ec       	ldi	r24, 0xCB	; 203
     3d4:	82 83       	std	Z+2, r24	; 0x02
                 OSC_XOSCSEL_XTAL_16KCLK_gc;                // Select start-up time
  OSC.CTRL |= OSC_XOSCEN_bm;                                // Enable oscillator
     3d6:	80 81       	ld	r24, Z
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );                // Wait for oscillator is ready
     3dc:	81 81       	ldd	r24, Z+1	; 0x01
     3de:	83 ff       	sbrs	r24, 3
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (OSC_PLLFAC_gm & 2);   // Select PLL source and multipl. factor
     3e2:	e0 e5       	ldi	r30, 0x50	; 80
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	82 ec       	ldi	r24, 0xC2	; 194
     3e8:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL |= OSC_PLLEN_bm;                                 // Enable PLL
     3ea:	80 81       	ld	r24, Z
     3ec:	80 61       	ori	r24, 0x10	; 16
     3ee:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );                 // Wait for PLL is ready
     3f0:	81 81       	ldd	r24, Z+1	; 0x01
     3f2:	84 ff       	sbrs	r24, 4
     3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;                                       // Security signature to modify clock
     3f6:	88 ed       	ldi	r24, 0xD8	; 216
     3f8:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;                            // Select system clock source
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;                               // Turn off 2MHz internal oscillator
     400:	e0 e5       	ldi	r30, 0x50	; 80
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	8e 7f       	andi	r24, 0xFE	; 254
     408:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;                              // Turn off 32MHz internal oscillator
     40a:	80 81       	ld	r24, Z
     40c:	8d 7f       	andi	r24, 0xFD	; 253
     40e:	80 83       	st	Z, r24
     410:	08 95       	ret

00000412 <init_adc>:
	PORTD.OUTSET = PIN1_bm;
}

void motor_off(void)
{
	PORTD.OUTCLR = PIN2_bm|PIN1_bm;
     412:	42 e0       	ldi	r20, 0x02	; 2
     414:	40 93 02 06 	sts	0x0602, r20	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     418:	e0 e0       	ldi	r30, 0x00	; 0
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	38 e0       	ldi	r19, 0x08	; 8
     41e:	31 a3       	std	Z+33, r19	; 0x21
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	80 a3       	std	Z+32, r24	; 0x20
     424:	20 e1       	ldi	r18, 0x10	; 16
     426:	22 83       	std	Z+2, r18	; 0x02
     428:	11 82       	std	Z+1, r1	; 0x01
     42a:	96 e0       	ldi	r25, 0x06	; 6
     42c:	94 83       	std	Z+4, r25	; 0x04
     42e:	80 83       	st	Z, r24
     430:	a0 e2       	ldi	r26, 0x20	; 32
     432:	b6 e0       	ldi	r27, 0x06	; 6
     434:	12 96       	adiw	r26, 0x02	; 2
     436:	4c 93       	st	X, r20
     438:	12 97       	sbiw	r26, 0x02	; 2
     43a:	e0 e4       	ldi	r30, 0x40	; 64
     43c:	f2 e0       	ldi	r31, 0x02	; 2
     43e:	31 a3       	std	Z+33, r19	; 0x21
     440:	80 a3       	std	Z+32, r24	; 0x20
     442:	22 83       	std	Z+2, r18	; 0x02
     444:	11 82       	std	Z+1, r1	; 0x01
     446:	94 83       	std	Z+4, r25	; 0x04
     448:	80 83       	st	Z, r24
     44a:	30 e2       	ldi	r19, 0x20	; 32
     44c:	12 96       	adiw	r26, 0x02	; 2
     44e:	3c 93       	st	X, r19
     450:	38 e2       	ldi	r19, 0x28	; 40
     452:	31 a7       	std	Z+41, r19	; 0x29
     454:	80 a7       	std	Z+40, r24	; 0x28
     456:	22 83       	std	Z+2, r18	; 0x02
     458:	24 e0       	ldi	r18, 0x04	; 4
     45a:	21 83       	std	Z+1, r18	; 0x01
     45c:	94 83       	std	Z+4, r25	; 0x04
     45e:	80 83       	st	Z, r24
     460:	08 95       	ret

00000462 <init_nrf>:
     462:	0e 94 86 07 	call	0xf0c	; 0xf0c <nrfspiInit>
     466:	0e 94 5d 07 	call	0xeba	; 0xeba <nrfBegin>
     46a:	68 e0       	ldi	r22, 0x08	; 8
     46c:	80 e3       	ldi	r24, 0x30	; 48
     46e:	0e 94 01 07 	call	0xe02	; 0xe02 <nrfSetRetries>
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	0e 94 cf 06 	call	0xd9e	; 0xd9e <nrfSetPALevel>
     478:	80 e2       	ldi	r24, 0x20	; 32
     47a:	0e 94 dd 06 	call	0xdba	; 0xdba <nrfSetDataRate>
     47e:	8c e0       	ldi	r24, 0x0C	; 12
     480:	0e 94 f3 06 	call	0xde6	; 0xde6 <nrfSetCRCLength>
     484:	80 e2       	ldi	r24, 0x20	; 32
     486:	0e 94 b7 06 	call	0xd6e	; 0xd6e <nrfSetChannel>
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 c3 06 	call	0xd86	; 0xd86 <nrfSetAutoAck>
     490:	0e 94 82 06 	call	0xd04	; 0xd04 <nrfEnableDynamicPayloads>
     494:	0e 94 58 07 	call	0xeb0	; 0xeb0 <nrfClearInterruptBits>
     498:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrfFlushRx>
     49c:	0e 94 6b 05 	call	0xad6	; 0xad6 <nrfFlushTx>
     4a0:	e0 ea       	ldi	r30, 0xA0	; 160
     4a2:	f6 e0       	ldi	r31, 0x06	; 6
     4a4:	82 85       	ldd	r24, Z+10	; 0x0a
     4a6:	80 64       	ori	r24, 0x40	; 64
     4a8:	82 87       	std	Z+10, r24	; 0x0a
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	86 8b       	std	Z+22, r24	; 0x16
     4ae:	81 85       	ldd	r24, Z+9	; 0x09
     4b0:	8c 7f       	andi	r24, 0xFC	; 252
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	81 87       	std	Z+9, r24	; 0x09
     4b6:	65 e0       	ldi	r22, 0x05	; 5
     4b8:	70 e2       	ldi	r23, 0x20	; 32
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 2a 06 	call	0xc54	; 0xc54 <nrfOpenReadingPipe>
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	70 e2       	ldi	r23, 0x20	; 32
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 2a 06 	call	0xc54	; 0xc54 <nrfOpenReadingPipe>
     4ca:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <nrfStartListening>
     4ce:	08 95       	ret

000004d0 <read_luchtsensor>:
     4d0:	e0 e0       	ldi	r30, 0x00	; 0
     4d2:	f2 e0       	ldi	r31, 0x02	; 2
     4d4:	80 a1       	ldd	r24, Z+32	; 0x20
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	80 a3       	std	Z+32, r24	; 0x20
     4da:	83 a1       	ldd	r24, Z+35	; 0x23
     4dc:	88 23       	and	r24, r24
     4de:	e9 f3       	breq	.-6      	; 0x4da <read_luchtsensor+0xa>
     4e0:	e0 e0       	ldi	r30, 0x00	; 0
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	24 a1       	ldd	r18, Z+36	; 0x24
     4e6:	35 a1       	ldd	r19, Z+37	; 0x25
     4e8:	93 a1       	ldd	r25, Z+35	; 0x23
     4ea:	91 60       	ori	r25, 0x01	; 1
     4ec:	93 a3       	std	Z+35, r25	; 0x23
     4ee:	c9 01       	movw	r24, r18
     4f0:	08 95       	ret

000004f2 <read_lichtsensor>:
     4f2:	e0 e4       	ldi	r30, 0x40	; 64
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
     4f6:	80 a1       	ldd	r24, Z+32	; 0x20
     4f8:	80 68       	ori	r24, 0x80	; 128
     4fa:	80 a3       	std	Z+32, r24	; 0x20
     4fc:	83 a1       	ldd	r24, Z+35	; 0x23
     4fe:	88 23       	and	r24, r24
     500:	e9 f3       	breq	.-6      	; 0x4fc <read_lichtsensor+0xa>
     502:	e0 e4       	ldi	r30, 0x40	; 64
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	24 a1       	ldd	r18, Z+36	; 0x24
     508:	35 a1       	ldd	r19, Z+37	; 0x25
     50a:	93 a1       	ldd	r25, Z+35	; 0x23
     50c:	91 60       	ori	r25, 0x01	; 1
     50e:	93 a3       	std	Z+35, r25	; 0x23
     510:	c9 01       	movw	r24, r18
     512:	08 95       	ret

00000514 <motor_up>:
     514:	e0 e6       	ldi	r30, 0x60	; 96
     516:	f6 e0       	ldi	r31, 0x06	; 6
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	86 83       	std	Z+6, r24	; 0x06
     51c:	84 e0       	ldi	r24, 0x04	; 4
     51e:	85 83       	std	Z+5, r24	; 0x05
     520:	08 95       	ret

00000522 <motor_down>:
     522:	e0 e6       	ldi	r30, 0x60	; 96
     524:	f6 e0       	ldi	r31, 0x06	; 6
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	86 83       	std	Z+6, r24	; 0x06
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	85 83       	std	Z+5, r24	; 0x05
     52e:	08 95       	ret

00000530 <init_servo>:
}

void init_servo(void)
{
	PORTD.DIRSET = PIN0_bm;
     530:	e0 e6       	ldi	r30, 0x60	; 96
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = PIN0_bm;
     538:	85 83       	std	Z+5, r24	; 0x05
	TCD0.CTRLB   = TC0_CCAEN_bm | TC_WGMODE_DSBOTH_gc;				//dual slope mode
     53a:	e0 e0       	ldi	r30, 0x00	; 0
     53c:	f9 e0       	ldi	r31, 0x09	; 9
     53e:	86 e1       	ldi	r24, 0x16	; 22
     540:	81 83       	std	Z+1, r24	; 0x01
	TCD0.CTRLA   = TC_CLKSEL_DIV64_gc;								//prescalling 64
     542:	85 e0       	ldi	r24, 0x05	; 5
     544:	80 83       	st	Z, r24
	TCD0.PER     = 5000;
     546:	88 e8       	ldi	r24, 0x88	; 136
     548:	93 e1       	ldi	r25, 0x13	; 19
     54a:	86 a3       	std	Z+38, r24	; 0x26
     54c:	97 a3       	std	Z+39, r25	; 0x27
	TCD0.CCA     = servo;
     54e:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <servo>
     552:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <servo+0x1>
     556:	80 a7       	std	Z+40, r24	; 0x28
     558:	91 a7       	std	Z+41, r25	; 0x29
     55a:	08 95       	ret

0000055c <__vector_14>:
}

ISR(TCC0_OVF_vect)
{
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	8f 93       	push	r24
	flag++;
     568:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	80 93 5e 20 	sts	0x205E, r24	; 0x80205e <__data_end>
}
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <main>:

int main(void)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	00 d0       	rcall	.+0      	; 0x584 <main+0x6>
     584:	00 d0       	rcall	.+0      	; 0x586 <main+0x8>
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
 *          which has a 16 MHz crystal 
 *
 * \return void
 */
void inline init_clock(void) {
  Config32MHzClock_Ext16M();
     58a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Config32MHzClock_Ext16M>
	init_clock();
	init_stream(F_CPU);
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	78 e4       	ldi	r23, 0x48	; 72
     592:	88 ee       	ldi	r24, 0xE8	; 232
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 2f 08 	call	0x105e	; 0x105e <init_stream>
	init_nrf();
     59a:	0e 94 31 02 	call	0x462	; 0x462 <init_nrf>
	init_adc();
     59e:	0e 94 09 02 	call	0x412	; 0x412 <init_adc>
	init_servo();
     5a2:	0e 94 98 02 	call	0x530	; 0x530 <init_servo>

	uint8_t position = 'u';											//variable for curtain position
		
	PORTD.DIRSET = PIN1_bm|PIN2_bm;									//output pins for DC-motor
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	81 83       	std	Z+1, r24	; 0x01
	
	PORTD.DIRCLR = PIN4_bm|PIN6_bm;									//input pin for buttons
     5ae:	80 e5       	ldi	r24, 0x50	; 80
     5b0:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;							//internal pullup resistor
     5b2:	80 e1       	ldi	r24, 0x10	; 16
     5b4:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
     5b6:	86 8b       	std	Z+22, r24	; 0x16

	PORTE.OUTCLR   = PIN3_bm|PIN0_bm;								//input pin for buttons
     5b8:	e0 e8       	ldi	r30, 0x80	; 128
     5ba:	f6 e0       	ldi	r31, 0x06	; 6
     5bc:	99 e0       	ldi	r25, 0x09	; 9
     5be:	96 83       	std	Z+6, r25	; 0x06
	PORTE.PIN0CTRL = PORT_OPC_PULLDOWN_gc;							//internal pullup resistor
     5c0:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
     5c2:	83 8b       	std	Z+19, r24	; 0x13
	
	PORTC.DIRSET = PIN0_bm;											//output pins for indication LED
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	
	TCC0.CTRLB     = TC_WGMODE_NORMAL_gc;
     5ca:	e0 e0       	ldi	r30, 0x00	; 0
     5cc:	f8 e0       	ldi	r31, 0x08	; 8
     5ce:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLA     = TC_CLKSEL_DIV1024_gc;
     5d0:	97 e0       	ldi	r25, 0x07	; 7
     5d2:	90 83       	st	Z, r25
	TCC0.PER       = 31249;              //  t = 1024*31250*(1/32) = 1s
     5d4:	21 e1       	ldi	r18, 0x11	; 17
     5d6:	3a e7       	ldi	r19, 0x7A	; 122
     5d8:	26 a3       	std	Z+38, r18	; 0x26
     5da:	37 a3       	std	Z+39, r19	; 0x27
	TCC0.INTCTRLA  = TC_OVFINTLVL_LO_gc;
     5dc:	86 83       	std	Z+6, r24	; 0x06
	
	sei();
     5de:	78 94       	sei
	init_stream(F_CPU);
	init_nrf();
	init_adc();
	init_servo();

	uint8_t position = 'u';											//variable for curtain position
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f5 e7       	ldi	r31, 0x75	; 117
     5e4:	4f 2e       	mov	r4, r31
     5e6:	f0 2d       	mov	r31, r0
				printf("Send: '%c' \n", f);
				nrfWrite( (uint8_t *) & f, 1);  // little endian: low byte is sent first
				nrfStartListening();
			}
		}
		if (PORTD.IN & PIN4_bm && position == 'd')					//if the button is pressed and the position of the curtain is down the motor can roll the curtain up.
     5e8:	00 e6       	ldi	r16, 0x60	; 96
     5ea:	16 e0       	ldi	r17, 0x06	; 6
	PORTD.OUTSET = PIN1_bm;
}

void motor_off(void)
{
	PORTD.OUTCLR = PIN2_bm|PIN1_bm;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f6 e0       	ldi	r31, 0x06	; 6
     5f0:	9f 2e       	mov	r9, r31
     5f2:	f0 2d       	mov	r31, r0
		{
			while (PORTD.IN & PIN6_bm)								//the motor keeps turning until the button is released
			{
				motor_down();
			}
			position = 'd';											//the position of the curtain is down
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f4 e6       	ldi	r31, 0x64	; 100
     5f8:	6f 2e       	mov	r6, r31
     5fa:	f0 2d       	mov	r31, r0
				motor_up();
			}
			position = 'u';											//the position of the curtain is up
		}
		
		if (PORTD.IN & PIN6_bm && position == 'u')					//if the button is pressed and the position of the curtain is up the motor can roll the curtain down
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f5 e7       	ldi	r31, 0x75	; 117
     600:	5f 2e       	mov	r5, r31
     602:	f0 2d       	mov	r31, r0
		}
		else
		{
			if(tgl == 0)
			{
				tgl = 1;
     604:	77 24       	eor	r7, r7
     606:	73 94       	inc	r7
				nrfStopListening();
				nrfOpenWritingPipe(pipe1);
				uint8_t f = 'f';
     608:	0f 2e       	mov	r0, r31
     60a:	f6 e6       	ldi	r31, 0x66	; 102
     60c:	8f 2e       	mov	r8, r31
     60e:	f0 2d       	mov	r31, r0
				printf("Send: '%c' \n", f);
     610:	0f 2e       	mov	r0, r31
     612:	ff e2       	ldi	r31, 0x2F	; 47
     614:	ef 2e       	mov	r14, r31
     616:	f0 e2       	ldi	r31, 0x20	; 32
     618:	ff 2e       	mov	r15, r31
     61a:	f0 2d       	mov	r31, r0
		}
		
		if(flag == 30){
			flag = 0;
			uint16_t msg[3];
			msg[0] = 'r';
     61c:	0f 2e       	mov	r0, r31
     61e:	f2 e7       	ldi	r31, 0x72	; 114
     620:	af 2e       	mov	r10, r31
     622:	b1 2c       	mov	r11, r1
     624:	f0 2d       	mov	r31, r0
			msg[1] = read_luchtsensor();
			msg[2] = MQ135_getPPM();
			nrfStopListening();
			nrfOpenWritingPipe(pipe2);
			printf("Send: %c, %d, %d\n", msg[0], msg[1], msg[2]);
     626:	0f 2e       	mov	r0, r31
     628:	fd e1       	ldi	r31, 0x1D	; 29
     62a:	cf 2e       	mov	r12, r31
     62c:	f0 e2       	ldi	r31, 0x20	; 32
     62e:	df 2e       	mov	r13, r31
     630:	f0 2d       	mov	r31, r0
     632:	0d c0       	rjmp	.+26     	; 0x64e <main+0xd0>
	while (1)
	{
		//printf("Licht: %d\tLuchtvochtigheid: %d\tCO2: %f ppm\n",read_lichtsensor(), read_luchtsensor(),MQ135_getPPM());
		
		while(Atgl == 1){
			motor_up();
     634:	0e 94 8a 02 	call	0x514	; 0x514 <motor_up>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     638:	2f ef       	ldi	r18, 0xFF	; 255
     63a:	8f e4       	ldi	r24, 0x4F	; 79
     63c:	93 ec       	ldi	r25, 0xC3	; 195
     63e:	21 50       	subi	r18, 0x01	; 1
     640:	80 40       	sbci	r24, 0x00	; 0
     642:	90 40       	sbci	r25, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <main+0xc0>
     646:	00 c0       	rjmp	.+0      	; 0x648 <main+0xca>
     648:	00 00       	nop
			_delay_ms(2000);
			Atgl = 0;
     64a:	10 92 5f 20 	sts	0x205F, r1	; 0x80205f <Atgl>
	
	while (1)
	{
		//printf("Licht: %d\tLuchtvochtigheid: %d\tCO2: %f ppm\n",read_lichtsensor(), read_luchtsensor(),MQ135_getPPM());
		
		while(Atgl == 1){
     64e:	80 91 5f 20 	lds	r24, 0x205F	; 0x80205f <Atgl>
     652:	81 30       	cpi	r24, 0x01	; 1
     654:	79 f3       	breq	.-34     	; 0x634 <main+0xb6>
			motor_up();
			_delay_ms(2000);
			Atgl = 0;
		}
		
		if(flag == 30){
     656:	80 91 5e 20 	lds	r24, 0x205E	; 0x80205e <__data_end>
     65a:	8e 31       	cpi	r24, 0x1E	; 30
     65c:	69 f5       	brne	.+90     	; 0x6b8 <main+0x13a>
			flag = 0;
     65e:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <__data_end>
			uint16_t msg[3];
			msg[0] = 'r';
     662:	a9 82       	std	Y+1, r10	; 0x01
     664:	ba 82       	std	Y+2, r11	; 0x02
			msg[1] = read_luchtsensor();
     666:	0e 94 68 02 	call	0x4d0	; 0x4d0 <read_luchtsensor>
     66a:	8b 83       	std	Y+3, r24	; 0x03
     66c:	9c 83       	std	Y+4, r25	; 0x04
			msg[2] = MQ135_getPPM();
     66e:	0e 94 3e 04 	call	0x87c	; 0x87c <MQ135_getPPM>
     672:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
     676:	6d 83       	std	Y+5, r22	; 0x05
     678:	7e 83       	std	Y+6, r23	; 0x06
			nrfStopListening();
     67a:	0e 94 af 05 	call	0xb5e	; 0xb5e <nrfStopListening>
			nrfOpenWritingPipe(pipe2);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e2       	ldi	r25, 0x20	; 32
     682:	0e 94 0c 06 	call	0xc18	; 0xc18 <nrfOpenWritingPipe>
			printf("Send: %c, %d, %d\n", msg[0], msg[1], msg[2]);
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	8f 93       	push	r24
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	8f 93       	push	r24
     68e:	8c 81       	ldd	r24, Y+4	; 0x04
     690:	8f 93       	push	r24
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	8f 93       	push	r24
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	8f 93       	push	r24
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	8f 93       	push	r24
     69e:	df 92       	push	r13
     6a0:	cf 92       	push	r12
     6a2:	0e 94 38 12 	call	0x2470	; 0x2470 <printf>
			nrfWrite((uint8_t *) & msg, sizeof(uint16_t) * 3);
     6a6:	69 2d       	mov	r22, r9
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 52 07 	call	0xea4	; 0xea4 <nrfWrite>
			nrfStartListening();
     6b0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <nrfStartListening>
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	de bf       	out	0x3e, r29	; 62
		}
		if (read_lichtsensor() > 175)								//read licht_sensor and if value is higher than 175 turn on blue LED else turn it off
     6b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <read_lichtsensor>
     6bc:	80 3b       	cpi	r24, 0xB0	; 176
     6be:	91 05       	cpc	r25, r1
     6c0:	18 f0       	brcs	.+6      	; 0x6c8 <main+0x14a>
		{
			//PORTC.OUTSET = PIN0_bm;
			tgl = 0;
     6c2:	10 92 60 20 	sts	0x2060, r1	; 0x802060 <tgl>
     6c6:	1e c0       	rjmp	.+60     	; 0x704 <main+0x186>
		}
		else
		{
			if(tgl == 0)
     6c8:	80 91 60 20 	lds	r24, 0x2060	; 0x802060 <tgl>
     6cc:	81 11       	cpse	r24, r1
     6ce:	1a c0       	rjmp	.+52     	; 0x704 <main+0x186>
			{
				tgl = 1;
     6d0:	70 92 60 20 	sts	0x2060, r7	; 0x802060 <tgl>
				nrfStopListening();
     6d4:	0e 94 af 05 	call	0xb5e	; 0xb5e <nrfStopListening>
				nrfOpenWritingPipe(pipe1);
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	90 e2       	ldi	r25, 0x20	; 32
     6dc:	0e 94 0c 06 	call	0xc18	; 0xc18 <nrfOpenWritingPipe>
				uint8_t f = 'f';
     6e0:	89 82       	std	Y+1, r8	; 0x01
				printf("Send: '%c' \n", f);
     6e2:	1f 92       	push	r1
     6e4:	8f 92       	push	r8
     6e6:	ff 92       	push	r15
     6e8:	ef 92       	push	r14
     6ea:	0e 94 38 12 	call	0x2470	; 0x2470 <printf>
				nrfWrite( (uint8_t *) & f, 1);  // little endian: low byte is sent first
     6ee:	67 2d       	mov	r22, r7
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0e 94 52 07 	call	0xea4	; 0xea4 <nrfWrite>
				nrfStartListening();
     6f8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <nrfStartListening>
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
			}
		}
		if (PORTD.IN & PIN4_bm && position == 'd')					//if the button is pressed and the position of the curtain is down the motor can roll the curtain up.
     704:	f8 01       	movw	r30, r16
     706:	80 85       	ldd	r24, Z+8	; 0x08
     708:	84 ff       	sbrs	r24, 4
     70a:	0e c0       	rjmp	.+28     	; 0x728 <main+0x1aa>
     70c:	f4 e6       	ldi	r31, 0x64	; 100
     70e:	4f 12       	cpse	r4, r31
     710:	0b c0       	rjmp	.+22     	; 0x728 <main+0x1aa>
		{
			while (PORTD.IN & PIN4_bm)								//the motor keeps turning until the button is released
     712:	f8 01       	movw	r30, r16
     714:	80 85       	ldd	r24, Z+8	; 0x08
     716:	84 ff       	sbrs	r24, 4
     718:	1e c0       	rjmp	.+60     	; 0x756 <main+0x1d8>
			{
				motor_up();
     71a:	0e 94 8a 02 	call	0x514	; 0x514 <motor_up>
				nrfStartListening();
			}
		}
		if (PORTD.IN & PIN4_bm && position == 'd')					//if the button is pressed and the position of the curtain is down the motor can roll the curtain up.
		{
			while (PORTD.IN & PIN4_bm)								//the motor keeps turning until the button is released
     71e:	f8 01       	movw	r30, r16
     720:	80 85       	ldd	r24, Z+8	; 0x08
     722:	84 fd       	sbrc	r24, 4
     724:	fa cf       	rjmp	.-12     	; 0x71a <main+0x19c>
     726:	17 c0       	rjmp	.+46     	; 0x756 <main+0x1d8>
				motor_up();
			}
			position = 'u';											//the position of the curtain is up
		}
		
		if (PORTD.IN & PIN6_bm && position == 'u')					//if the button is pressed and the position of the curtain is up the motor can roll the curtain down
     728:	f8 01       	movw	r30, r16
     72a:	80 85       	ldd	r24, Z+8	; 0x08
     72c:	86 ff       	sbrs	r24, 6
     72e:	10 c0       	rjmp	.+32     	; 0x750 <main+0x1d2>
     730:	f5 e7       	ldi	r31, 0x75	; 117
     732:	4f 12       	cpse	r4, r31
     734:	0d c0       	rjmp	.+26     	; 0x750 <main+0x1d2>
		{
			while (PORTD.IN & PIN6_bm)								//the motor keeps turning until the button is released
     736:	f8 01       	movw	r30, r16
     738:	80 85       	ldd	r24, Z+8	; 0x08
     73a:	86 ff       	sbrs	r24, 6
     73c:	08 c0       	rjmp	.+16     	; 0x74e <main+0x1d0>
			{
				motor_down();
     73e:	0e 94 91 02 	call	0x522	; 0x522 <motor_down>
			position = 'u';											//the position of the curtain is up
		}
		
		if (PORTD.IN & PIN6_bm && position == 'u')					//if the button is pressed and the position of the curtain is up the motor can roll the curtain down
		{
			while (PORTD.IN & PIN6_bm)								//the motor keeps turning until the button is released
     742:	f8 01       	movw	r30, r16
     744:	80 85       	ldd	r24, Z+8	; 0x08
     746:	86 fd       	sbrc	r24, 6
     748:	fa cf       	rjmp	.-12     	; 0x73e <main+0x1c0>
			{
				motor_down();
			}
			position = 'd';											//the position of the curtain is down
     74a:	46 2c       	mov	r4, r6
     74c:	01 c0       	rjmp	.+2      	; 0x750 <main+0x1d2>
     74e:	46 2c       	mov	r4, r6
	PORTD.OUTSET = PIN1_bm;
}

void motor_off(void)
{
	PORTD.OUTCLR = PIN2_bm|PIN1_bm;
     750:	f8 01       	movw	r30, r16
     752:	96 82       	std	Z+6, r9	; 0x06
     754:	7c cf       	rjmp	.-264    	; 0x64e <main+0xd0>
				motor_up();
			}
			position = 'u';											//the position of the curtain is up
		}
		
		if (PORTD.IN & PIN6_bm && position == 'u')					//if the button is pressed and the position of the curtain is up the motor can roll the curtain down
     756:	f8 01       	movw	r30, r16
     758:	80 85       	ldd	r24, Z+8	; 0x08
     75a:	86 fd       	sbrc	r24, 6
     75c:	ec cf       	rjmp	.-40     	; 0x736 <main+0x1b8>
     75e:	45 2c       	mov	r4, r5
     760:	f7 cf       	rjmp	.-18     	; 0x750 <main+0x1d2>

00000762 <__vector_104>:
		motor_off();												//if no button is pressed keep motor off
 	}
}

ISR(PORTF_INT0_vect)
{
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	0b b6       	in	r0, 0x3b	; 59
     76e:	0f 92       	push	r0
     770:	1f 93       	push	r17
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <__vector_104+0x2e>
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
	uint8_t  tx_ds, max_rt, rx_dr;

	nrfWhatHappened(&tx_ds, &max_rt, &rx_dr);
     794:	ae 01       	movw	r20, r28
     796:	4d 5f       	subi	r20, 0xFD	; 253
     798:	5f 4f       	sbci	r21, 0xFF	; 255
     79a:	be 01       	movw	r22, r28
     79c:	6e 5f       	subi	r22, 0xFE	; 254
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <nrfWhatHappened>
	if ( rx_dr )
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	88 23       	and	r24, r24
     7ac:	d1 f0       	breq	.+52     	; 0x7e2 <__vector_104+0x80>
	{
		nrfRead(packet, nrfGetDynamicPayloadSize());
     7ae:	0e 94 a5 06 	call	0xd4a	; 0xd4a <nrfGetDynamicPayloadSize>
     7b2:	68 2f       	mov	r22, r24
     7b4:	83 e3       	ldi	r24, 0x33	; 51
     7b6:	91 e2       	ldi	r25, 0x21	; 33
     7b8:	0e 94 55 05 	call	0xaaa	; 0xaaa <nrfRead>
		uint8_t res = packet[0];
     7bc:	10 91 33 21 	lds	r17, 0x2133	; 0x802133 <packet>
		printf("Received: %c \n", res);
     7c0:	1f 92       	push	r1
     7c2:	1f 93       	push	r17
     7c4:	8c e3       	ldi	r24, 0x3C	; 60
     7c6:	90 e2       	ldi	r25, 0x20	; 32
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	0e 94 38 12 	call	0x2470	; 0x2470 <printf>
		if(res == 'm'){
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	1d 36       	cpi	r17, 0x6D	; 109
     7da:	19 f4       	brne	.+6      	; 0x7e2 <__vector_104+0x80>
			Atgl = 1;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 5f 20 	sts	0x205F, r24	; 0x80205f <Atgl>
		}else if(res == 'd'){
			//sendData = 1;
		}
	}
     7e2:	23 96       	adiw	r28, 0x03	; 3
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	1f 91       	pop	r17
     806:	0f 90       	pop	r0
     808:	0b be       	out	0x3b, r0	; 59
     80a:	0f 90       	pop	r0
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	0f 90       	pop	r0
     810:	1f 90       	pop	r1
     812:	18 95       	reti

00000814 <read_co2sensor>:
*/
/**************************************************************************/
float MQ135_getCorrectedResistance(float t, float h)
{
  return MQ135_getResistance()/MQ135_getCorrectionFactor(t, h);
}
     814:	e0 e4       	ldi	r30, 0x40	; 64
     816:	f2 e0       	ldi	r31, 0x02	; 2
     818:	80 a5       	ldd	r24, Z+40	; 0x28
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	80 a7       	std	Z+40, r24	; 0x28
     81e:	83 a5       	ldd	r24, Z+43	; 0x2b
     820:	88 23       	and	r24, r24
     822:	e9 f3       	breq	.-6      	; 0x81e <read_co2sensor+0xa>
     824:	e0 e4       	ldi	r30, 0x40	; 64
     826:	f2 e0       	ldi	r31, 0x02	; 2
     828:	24 a5       	ldd	r18, Z+44	; 0x2c
     82a:	35 a5       	ldd	r19, Z+45	; 0x2d
     82c:	93 a5       	ldd	r25, Z+43	; 0x2b
     82e:	91 60       	ori	r25, 0x01	; 1
     830:	93 a7       	std	Z+43, r25	; 0x2b
     832:	c9 01       	movw	r24, r18
     834:	08 95       	ret

00000836 <MQ135_getResistance>:
     836:	0e 94 0a 04 	call	0x814	; 0x814 <read_co2sensor>
     83a:	bc 01       	movw	r22, r24
     83c:	99 0f       	add	r25, r25
     83e:	88 0b       	sbc	r24, r24
     840:	99 0b       	sbc	r25, r25
     842:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
     846:	9b 01       	movw	r18, r22
     848:	ac 01       	movw	r20, r24
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 ec       	ldi	r23, 0xC0	; 192
     84e:	8f e7       	ldi	r24, 0x7F	; 127
     850:	94 e4       	ldi	r25, 0x44	; 68
     852:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 ea       	ldi	r20, 0xA0	; 160
     85c:	50 e4       	ldi	r21, 0x40	; 64
     85e:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e8       	ldi	r20, 0x80	; 128
     868:	5f e3       	ldi	r21, 0x3F	; 63
     86a:	0e 94 89 09 	call	0x1312	; 0x1312 <__subsf3>
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e2       	ldi	r20, 0x20	; 32
     874:	51 e4       	ldi	r21, 0x41	; 65
     876:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
     87a:	08 95       	ret

0000087c <MQ135_getPPM>:
@return The ppm of CO2 in the air
*/
/**************************************************************************/
float MQ135_getPPM(void)
{
  return PARA * pow((MQ135_getResistance()/RZERO), -PARB);
     87c:	0e 94 1b 04 	call	0x836	; 0x836 <MQ135_getResistance>
     880:	2f e8       	ldi	r18, 0x8F	; 143
     882:	32 e4       	ldi	r19, 0x42	; 66
     884:	49 e9       	ldi	r20, 0x99	; 153
     886:	52 e4       	ldi	r21, 0x42	; 66
     888:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
     88c:	2e ed       	ldi	r18, 0xDE	; 222
     88e:	37 e3       	ldi	r19, 0x37	; 55
     890:	41 e3       	ldi	r20, 0x31	; 49
     892:	50 ec       	ldi	r21, 0xC0	; 192
     894:	0e 94 92 0b 	call	0x1724	; 0x1724 <pow>
     898:	22 e4       	ldi	r18, 0x42	; 66
     89a:	34 e3       	ldi	r19, 0x34	; 52
     89c:	49 ee       	ldi	r20, 0xE9	; 233
     89e:	52 e4       	ldi	r21, 0x42	; 66
     8a0:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
}
     8a4:	08 95       	ret

000008a6 <nrfReadRegister>:
 * \brief   Disbale CRC
 */
void nrfDisableCRC( void )
{
  uint8_t config = nrfReadRegister(REG_CONFIG) & ~NRF_CONFIG_EN_CRC_bm;
  nrfWriteRegister( REG_CONFIG, config );
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	c0 ea       	ldi	r28, 0xA0	; 160
     8ae:	d6 e0       	ldi	r29, 0x06	; 6
     8b0:	10 e2       	ldi	r17, 0x20	; 32
     8b2:	1e 83       	std	Y+6, r17	; 0x06
     8b4:	8f 71       	andi	r24, 0x1F	; 31
     8b6:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     8c0:	1d 83       	std	Y+5, r17	; 0x05
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	08 95       	ret

000008ca <nrfWriteRegisterMulti>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	7b 01       	movw	r14, r22
     8da:	c4 2f       	mov	r28, r20
     8dc:	90 e2       	ldi	r25, 0x20	; 32
     8de:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     8e2:	8f 71       	andi	r24, 0x1F	; 31
     8e4:	80 62       	ori	r24, 0x20	; 32
     8e6:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     8ea:	d8 2e       	mov	r13, r24
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	8c 0f       	add	r24, r28
     8f0:	cc 23       	and	r28, r28
     8f2:	69 f0       	breq	.+26     	; 0x90e <nrfWriteRegisterMulti+0x44>
     8f4:	e7 01       	movw	r28, r14
     8f6:	08 2f       	mov	r16, r24
     8f8:	10 e0       	ldi	r17, 0x00	; 0
     8fa:	0f 5f       	subi	r16, 0xFF	; 255
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	0e 0d       	add	r16, r14
     900:	1f 1d       	adc	r17, r15
     902:	89 91       	ld	r24, Y+
     904:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     908:	c0 17       	cp	r28, r16
     90a:	d1 07       	cpc	r29, r17
     90c:	d1 f7       	brne	.-12     	; 0x902 <nrfWriteRegisterMulti+0x38>
     90e:	80 e2       	ldi	r24, 0x20	; 32
     910:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     914:	8d 2d       	mov	r24, r13
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	08 95       	ret

00000926 <nrfWriteRegister>:
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	f6 2e       	mov	r15, r22
     932:	c0 ea       	ldi	r28, 0xA0	; 160
     934:	d6 e0       	ldi	r29, 0x06	; 6
     936:	10 e2       	ldi	r17, 0x20	; 32
     938:	1e 83       	std	Y+6, r17	; 0x06
     93a:	8f 71       	andi	r24, 0x1F	; 31
     93c:	80 62       	ori	r24, 0x20	; 32
     93e:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     942:	08 2f       	mov	r16, r24
     944:	8f 2d       	mov	r24, r15
     946:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     94a:	1d 83       	std	Y+5, r17	; 0x05
     94c:	80 2f       	mov	r24, r16
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	08 95       	ret

0000095a <nrfWritePayload>:
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	6c 01       	movw	r12, r24
     96e:	84 2f       	mov	r24, r20
     970:	c0 91 0d 20 	lds	r28, 0x200D	; 0x80200d <fixed_payload_size>
     974:	1c 2f       	mov	r17, r28
     976:	6c 17       	cp	r22, r28
     978:	08 f4       	brcc	.+2      	; 0x97c <nrfWritePayload+0x22>
     97a:	16 2f       	mov	r17, r22
     97c:	90 91 66 20 	lds	r25, 0x2066	; 0x802066 <dynamic_payloads_enabled>
     980:	91 11       	cpse	r25, r1
     982:	25 c0       	rjmp	.+74     	; 0x9ce <nrfWritePayload+0x74>
     984:	0c 2f       	mov	r16, r28
     986:	01 1b       	sub	r16, r17
     988:	90 e2       	ldi	r25, 0x20	; 32
     98a:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     98e:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     992:	b8 2e       	mov	r11, r24
     994:	ee 24       	eor	r14, r14
     996:	ea 94       	dec	r14
     998:	e1 0e       	add	r14, r17
     99a:	11 11       	cpse	r17, r1
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <nrfWritePayload+0x48>
     99e:	0e c0       	rjmp	.+28     	; 0x9bc <nrfWritePayload+0x62>
     9a0:	00 e0       	ldi	r16, 0x00	; 0
     9a2:	e6 01       	movw	r28, r12
     9a4:	f1 2c       	mov	r15, r1
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	e8 1a       	sub	r14, r24
     9aa:	f8 0a       	sbc	r15, r24
     9ac:	ec 0c       	add	r14, r12
     9ae:	fd 1c       	adc	r15, r13
     9b0:	89 91       	ld	r24, Y+
     9b2:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     9b6:	ec 16       	cp	r14, r28
     9b8:	fd 06       	cpc	r15, r29
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <nrfWritePayload+0x56>
     9bc:	00 23       	and	r16, r16
     9be:	91 f0       	breq	.+36     	; 0x9e4 <nrfWritePayload+0x8a>
     9c0:	c0 2f       	mov	r28, r16
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     9c8:	c1 50       	subi	r28, 0x01	; 1
     9ca:	d9 f7       	brne	.-10     	; 0x9c2 <nrfWritePayload+0x68>
     9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <nrfWritePayload+0x8a>
     9ce:	90 e2       	ldi	r25, 0x20	; 32
     9d0:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     9d4:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     9d8:	b8 2e       	mov	r11, r24
     9da:	ee 24       	eor	r14, r14
     9dc:	ea 94       	dec	r14
     9de:	e1 0e       	add	r14, r17
     9e0:	11 11       	cpse	r17, r1
     9e2:	de cf       	rjmp	.-68     	; 0x9a0 <nrfWritePayload+0x46>
     9e4:	80 e2       	ldi	r24, 0x20	; 32
     9e6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     9ea:	8b 2d       	mov	r24, r11
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	08 95       	ret

00000a00 <nrfReadPayload>:
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	6c 01       	movw	r12, r24
     a14:	c0 91 0d 20 	lds	r28, 0x200D	; 0x80200d <fixed_payload_size>
     a18:	1c 2f       	mov	r17, r28
     a1a:	6c 17       	cp	r22, r28
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <nrfReadPayload+0x20>
     a1e:	16 2f       	mov	r17, r22
     a20:	80 91 66 20 	lds	r24, 0x2066	; 0x802066 <dynamic_payloads_enabled>
     a24:	81 11       	cpse	r24, r1
     a26:	27 c0       	rjmp	.+78     	; 0xa76 <nrfReadPayload+0x76>
     a28:	0c 2f       	mov	r16, r28
     a2a:	01 1b       	sub	r16, r17
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     a32:	81 e6       	ldi	r24, 0x61	; 97
     a34:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     a38:	b8 2e       	mov	r11, r24
     a3a:	ee 24       	eor	r14, r14
     a3c:	ea 94       	dec	r14
     a3e:	e1 0e       	add	r14, r17
     a40:	11 11       	cpse	r17, r1
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <nrfReadPayload+0x48>
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <nrfReadPayload+0x64>
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	e6 01       	movw	r28, r12
     a4a:	f1 2c       	mov	r15, r1
     a4c:	8f ef       	ldi	r24, 0xFF	; 255
     a4e:	e8 1a       	sub	r14, r24
     a50:	f8 0a       	sbc	r15, r24
     a52:	ec 0c       	add	r14, r12
     a54:	fd 1c       	adc	r15, r13
     a56:	8f ef       	ldi	r24, 0xFF	; 255
     a58:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     a5c:	89 93       	st	Y+, r24
     a5e:	ec 16       	cp	r14, r28
     a60:	fd 06       	cpc	r15, r29
     a62:	c9 f7       	brne	.-14     	; 0xa56 <nrfReadPayload+0x56>
     a64:	00 23       	and	r16, r16
     a66:	99 f0       	breq	.+38     	; 0xa8e <nrfReadPayload+0x8e>
     a68:	c0 2f       	mov	r28, r16
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     a70:	c1 50       	subi	r28, 0x01	; 1
     a72:	d9 f7       	brne	.-10     	; 0xa6a <nrfReadPayload+0x6a>
     a74:	0c c0       	rjmp	.+24     	; 0xa8e <nrfReadPayload+0x8e>
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     a7c:	81 e6       	ldi	r24, 0x61	; 97
     a7e:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     a82:	b8 2e       	mov	r11, r24
     a84:	ee 24       	eor	r14, r14
     a86:	ea 94       	dec	r14
     a88:	e1 0e       	add	r14, r17
     a8a:	11 11       	cpse	r17, r1
     a8c:	dc cf       	rjmp	.-72     	; 0xa46 <nrfReadPayload+0x46>
     a8e:	80 e2       	ldi	r24, 0x20	; 32
     a90:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     a94:	8b 2d       	mov	r24, r11
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	bf 90       	pop	r11
     aa8:	08 95       	ret

00000aaa <nrfRead>:
     aaa:	0e 94 00 05 	call	0xa00	; 0xa00 <nrfReadPayload>
     aae:	87 e1       	ldi	r24, 0x17	; 23
     ab0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     ab4:	81 70       	andi	r24, 0x01	; 1
     ab6:	08 95       	ret

00000ab8 <nrfFlushRx>:
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	c0 ea       	ldi	r28, 0xA0	; 160
     ac0:	d6 e0       	ldi	r29, 0x06	; 6
     ac2:	10 e2       	ldi	r17, 0x20	; 32
     ac4:	1e 83       	std	Y+6, r17	; 0x06
     ac6:	82 ee       	ldi	r24, 0xE2	; 226
     ac8:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     acc:	1d 83       	std	Y+5, r17	; 0x05
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	08 95       	ret

00000ad6 <nrfFlushTx>:
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	c0 ea       	ldi	r28, 0xA0	; 160
     ade:	d6 e0       	ldi	r29, 0x06	; 6
     ae0:	10 e2       	ldi	r17, 0x20	; 32
     ae2:	1e 83       	std	Y+6, r17	; 0x06
     ae4:	81 ee       	ldi	r24, 0xE1	; 225
     ae6:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     aea:	1d 83       	std	Y+5, r17	; 0x05
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	08 95       	ret

00000af4 <nrfStartListening>:
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     afa:	81 fd       	sbrc	r24, 1
     afc:	0c c0       	rjmp	.+24     	; 0xb16 <nrfStartListening+0x22>
     afe:	68 2f       	mov	r22, r24
     b00:	63 60       	ori	r22, 0x03	; 3
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     b08:	8f e7       	ldi	r24, 0x7F	; 127
     b0a:	9e e3       	ldi	r25, 0x3E	; 62
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <nrfStartListening+0x18>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <nrfStartListening+0x1e>
     b12:	00 00       	nop
     b14:	05 c0       	rjmp	.+10     	; 0xb20 <nrfStartListening+0x2c>
     b16:	68 2f       	mov	r22, r24
     b18:	61 60       	ori	r22, 0x01	; 1
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     b20:	8f e0       	ldi	r24, 0x0F	; 15
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <nrfStartListening+0x30>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <nrfStartListening+0x36>
     b2a:	00 00       	nop
     b2c:	60 e7       	ldi	r22, 0x70	; 112
     b2e:	87 e0       	ldi	r24, 0x07	; 7
     b30:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     b34:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     b38:	61 e6       	ldi	r22, 0x61	; 97
     b3a:	70 e2       	ldi	r23, 0x20	; 32
     b3c:	8a e0       	ldi	r24, 0x0A	; 10
     b3e:	0e 94 65 04 	call	0x8ca	; 0x8ca <nrfWriteRegisterMulti>
     b42:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrfFlushRx>
     b46:	0e 94 6b 05 	call	0xad6	; 0xad6 <nrfFlushTx>
     b4a:	80 e8       	ldi	r24, 0x80	; 128
     b4c:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     b50:	8f e0       	ldi	r24, 0x0F	; 15
     b52:	94 e0       	ldi	r25, 0x04	; 4
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <nrfStartListening+0x60>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <nrfStartListening+0x66>
     b5a:	00 00       	nop
     b5c:	08 95       	ret

00000b5e <nrfStopListening>:
     b5e:	80 e8       	ldi	r24, 0x80	; 128
     b60:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     b64:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrfFlushRx>
     b68:	0e 94 6b 05 	call	0xad6	; 0xad6 <nrfFlushTx>
     b6c:	08 95       	ret

00000b6e <nrfStartWrite>:
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	ec 01       	movw	r28, r24
     b78:	16 2f       	mov	r17, r22
     b7a:	04 2f       	mov	r16, r20
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     b82:	81 fd       	sbrc	r24, 1
     b84:	0d c0       	rjmp	.+26     	; 0xba0 <nrfStartWrite+0x32>
     b86:	68 2f       	mov	r22, r24
     b88:	6e 7f       	andi	r22, 0xFE	; 254
     b8a:	62 60       	ori	r22, 0x02	; 2
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     b92:	8f e7       	ldi	r24, 0x7F	; 127
     b94:	9e e3       	ldi	r25, 0x3E	; 62
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <nrfStartWrite+0x28>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <nrfStartWrite+0x2e>
     b9c:	00 00       	nop
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <nrfStartWrite+0x3c>
     ba0:	68 2f       	mov	r22, r24
     ba2:	6e 7f       	andi	r22, 0xFE	; 254
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     baa:	8f e0       	ldi	r24, 0x0F	; 15
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <nrfStartWrite+0x40>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <nrfStartWrite+0x46>
     bb4:	00 00       	nop
     bb6:	40 2f       	mov	r20, r16
     bb8:	61 2f       	mov	r22, r17
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 ad 04 	call	0x95a	; 0x95a <nrfWritePayload>
     bc0:	e0 ea       	ldi	r30, 0xA0	; 160
     bc2:	f6 e0       	ldi	r31, 0x06	; 6
     bc4:	80 e8       	ldi	r24, 0x80	; 128
     bc6:	85 83       	std	Z+5, r24	; 0x05
     bc8:	9a e6       	ldi	r25, 0x6A	; 106
     bca:	9a 95       	dec	r25
     bcc:	f1 f7       	brne	.-4      	; 0xbca <nrfStartWrite+0x5c>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <nrfStartWrite+0x62>
     bd0:	86 83       	std	Z+6, r24	; 0x06
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <nrfWhatHappened>:
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	7c 01       	movw	r14, r24
     bea:	8b 01       	movw	r16, r22
     bec:	ea 01       	movw	r28, r20
     bee:	60 e7       	ldi	r22, 0x70	; 112
     bf0:	87 e0       	ldi	r24, 0x07	; 7
     bf2:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     bf6:	98 2f       	mov	r25, r24
     bf8:	90 72       	andi	r25, 0x20	; 32
     bfa:	f7 01       	movw	r30, r14
     bfc:	90 83       	st	Z, r25
     bfe:	98 2f       	mov	r25, r24
     c00:	90 71       	andi	r25, 0x10	; 16
     c02:	f8 01       	movw	r30, r16
     c04:	90 83       	st	Z, r25
     c06:	80 74       	andi	r24, 0x40	; 64
     c08:	88 83       	st	Y, r24
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	08 95       	ret

00000c18 <nrfOpenWritingPipe>:
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	ec 01       	movw	r28, r24
     c1e:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     c22:	bc 01       	movw	r22, r24
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	0e 94 65 04 	call	0x8ca	; 0x8ca <nrfWriteRegisterMulti>
     c2a:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     c2e:	be 01       	movw	r22, r28
     c30:	80 e1       	ldi	r24, 0x10	; 16
     c32:	0e 94 65 04 	call	0x8ca	; 0x8ca <nrfWriteRegisterMulti>
     c36:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
     c3a:	60 32       	cpi	r22, 0x20	; 32
     c3c:	20 f4       	brcc	.+8      	; 0xc46 <nrfOpenWritingPipe+0x2e>
     c3e:	81 e1       	ldi	r24, 0x11	; 17
     c40:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <nrfOpenWritingPipe+0x36>
     c46:	60 e2       	ldi	r22, 0x20	; 32
     c48:	81 e1       	ldi	r24, 0x11	; 17
     c4a:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	08 95       	ret

00000c54 <nrfOpenReadingPipe>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	c8 2f       	mov	r28, r24
     c5e:	8b 01       	movw	r16, r22
     c60:	81 11       	cpse	r24, r1
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <nrfOpenReadingPipe+0x20>
     c64:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	81 e6       	ldi	r24, 0x61	; 97
     c6c:	90 e2       	ldi	r25, 0x20	; 32
     c6e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <memcpy>
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <nrfOpenReadingPipe+0x28>
     c74:	87 30       	cpi	r24, 0x07	; 7
     c76:	78 f5       	brcc	.+94     	; 0xcd6 <nrfOpenReadingPipe+0x82>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	58 f4       	brcc	.+22     	; 0xc92 <nrfOpenReadingPipe+0x3e>
     c7c:	ec 2f       	mov	r30, r28
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	e9 5a       	subi	r30, 0xA9	; 169
     c82:	ff 4d       	sbci	r31, 0xDF	; 223
     c84:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     c88:	b8 01       	movw	r22, r16
     c8a:	80 81       	ld	r24, Z
     c8c:	0e 94 65 04 	call	0x8ca	; 0x8ca <nrfWriteRegisterMulti>
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <nrfOpenReadingPipe+0x4e>
     c92:	e8 2f       	mov	r30, r24
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	e9 5a       	subi	r30, 0xA9	; 169
     c98:	ff 4d       	sbci	r31, 0xDF	; 223
     c9a:	41 e0       	ldi	r20, 0x01	; 1
     c9c:	80 81       	ld	r24, Z
     c9e:	0e 94 65 04 	call	0x8ca	; 0x8ca <nrfWriteRegisterMulti>
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
     ca4:	fe 01       	movw	r30, r28
     ca6:	ef 5a       	subi	r30, 0xAF	; 175
     ca8:	ff 4d       	sbci	r31, 0xDF	; 223
     caa:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
     cae:	80 81       	ld	r24, Z
     cb0:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     cba:	c5 5b       	subi	r28, 0xB5	; 181
     cbc:	df 4d       	sbci	r29, 0xDF	; 223
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	08 80       	ld	r0, Y
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <nrfOpenReadingPipe+0x76>
     cc6:	66 0f       	add	r22, r22
     cc8:	77 1f       	adc	r23, r23
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <nrfOpenReadingPipe+0x72>
     cce:	68 2b       	or	r22, r24
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	08 95       	ret

00000ce0 <nrfToggleFeatures>:
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	c0 ea       	ldi	r28, 0xA0	; 160
     ce8:	d6 e0       	ldi	r29, 0x06	; 6
     cea:	10 e2       	ldi	r17, 0x20	; 32
     cec:	1e 83       	std	Y+6, r17	; 0x06
     cee:	80 e5       	ldi	r24, 0x50	; 80
     cf0:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     cf4:	83 e7       	ldi	r24, 0x73	; 115
     cf6:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     cfa:	1d 83       	std	Y+5, r17	; 0x05
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	08 95       	ret

00000d04 <nrfEnableDynamicPayloads>:
     d04:	8d e1       	ldi	r24, 0x1D	; 29
     d06:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     d0a:	68 2f       	mov	r22, r24
     d0c:	64 60       	ori	r22, 0x04	; 4
     d0e:	8d e1       	ldi	r24, 0x1D	; 29
     d10:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d14:	8d e1       	ldi	r24, 0x1D	; 29
     d16:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     d1a:	81 11       	cpse	r24, r1
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <nrfEnableDynamicPayloads+0x2e>
     d1e:	0e 94 70 06 	call	0xce0	; 0xce0 <nrfToggleFeatures>
     d22:	8d e1       	ldi	r24, 0x1D	; 29
     d24:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     d28:	68 2f       	mov	r22, r24
     d2a:	64 60       	ori	r22, 0x04	; 4
     d2c:	8d e1       	ldi	r24, 0x1D	; 29
     d2e:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d32:	8c e1       	ldi	r24, 0x1C	; 28
     d34:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     d38:	68 2f       	mov	r22, r24
     d3a:	6f 63       	ori	r22, 0x3F	; 63
     d3c:	8c e1       	ldi	r24, 0x1C	; 28
     d3e:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 66 20 	sts	0x2066, r24	; 0x802066 <dynamic_payloads_enabled>
     d48:	08 95       	ret

00000d4a <nrfGetDynamicPayloadSize>:
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	c0 ea       	ldi	r28, 0xA0	; 160
     d52:	d6 e0       	ldi	r29, 0x06	; 6
     d54:	10 e2       	ldi	r17, 0x20	; 32
     d56:	1e 83       	std	Y+6, r17	; 0x06
     d58:	80 e6       	ldi	r24, 0x60	; 96
     d5a:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	0e 94 a0 07 	call	0xf40	; 0xf40 <nrfspiTransfer>
     d64:	1d 83       	std	Y+5, r17	; 0x05
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <nrfSetChannel>:
     d6e:	88 23       	and	r24, r24
     d70:	2c f0       	brlt	.+10     	; 0xd7c <nrfSetChannel+0xe>
     d72:	68 2f       	mov	r22, r24
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d7a:	08 95       	ret
     d7c:	6f e7       	ldi	r22, 0x7F	; 127
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d84:	08 95       	ret

00000d86 <nrfSetAutoAck>:
     d86:	88 23       	and	r24, r24
     d88:	29 f0       	breq	.+10     	; 0xd94 <nrfSetAutoAck+0xe>
     d8a:	6f e3       	ldi	r22, 0x3F	; 63
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d92:	08 95       	ret
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     d9c:	08 95       	ret

00000d9e <nrfSetPALevel>:
     d9e:	cf 93       	push	r28
     da0:	c8 2f       	mov	r28, r24
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     da8:	89 7f       	andi	r24, 0xF9	; 249
     daa:	c6 70       	andi	r28, 0x06	; 6
     dac:	68 2f       	mov	r22, r24
     dae:	6c 2b       	or	r22, r28
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <nrfSetDataRate>:
     dba:	cf 93       	push	r28
     dbc:	c8 2f       	mov	r28, r24
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     dc4:	87 7d       	andi	r24, 0xD7	; 215
     dc6:	9c 2f       	mov	r25, r28
     dc8:	98 72       	andi	r25, 0x28	; 40
     dca:	68 2f       	mov	r22, r24
     dcc:	69 2b       	or	r22, r25
     dce:	86 e0       	ldi	r24, 0x06	; 6
     dd0:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     dd4:	86 e0       	ldi	r24, 0x06	; 6
     dd6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	c8 13       	cpse	r28, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	89 2f       	mov	r24, r25
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <nrfSetCRCLength>:
     de6:	cf 93       	push	r28
     de8:	c8 2f       	mov	r28, r24
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     df0:	83 7f       	andi	r24, 0xF3	; 243
     df2:	cc 70       	andi	r28, 0x0C	; 12
     df4:	68 2f       	mov	r22, r24
     df6:	6c 2b       	or	r22, r28
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <nrfSetRetries>:
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     e02:	68 2b       	or	r22, r24
     e04:	84 e0       	ldi	r24, 0x04	; 4
     e06:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     e0a:	08 95       	ret

00000e0c <nrfGetMaxTimeout>:
 *
 * @return  maximum timeout in us
 */

uint16_t nrfGetMaxTimeout(void){
  uint8_t retries = nrfReadRegister(REG_SETUP_RETR);
     e0c:	84 e0       	ldi	r24, 0x04	; 4
     e0e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
  uint8_t delay   = (retries & NRF_SETUP_ARD_gm) >> NRF_SETUP_ARD_gp;
  uint8_t count   = (retries & NRF_SETUP_ARC_gm) >> NRF_SETUP_ARC_gp;

  uint16_t to = 250 * (delay + 1) * (count + 1);

  return to ;
     e12:	28 2f       	mov	r18, r24
     e14:	22 95       	swap	r18
     e16:	2f 70       	andi	r18, 0x0F	; 15
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	2f 5f       	subi	r18, 0xFF	; 255
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	9a ef       	ldi	r25, 0xFA	; 250
     e20:	92 9f       	mul	r25, r18
     e22:	a0 01       	movw	r20, r0
     e24:	93 9f       	mul	r25, r19
     e26:	50 0d       	add	r21, r0
     e28:	11 24       	eor	r1, r1
     e2a:	8f 70       	andi	r24, 0x0F	; 15
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	01 96       	adiw	r24, 0x01	; 1
}
     e30:	9c 01       	movw	r18, r24
     e32:	42 9f       	mul	r20, r18
     e34:	c0 01       	movw	r24, r0
     e36:	43 9f       	mul	r20, r19
     e38:	90 0d       	add	r25, r0
     e3a:	52 9f       	mul	r21, r18
     e3c:	90 0d       	add	r25, r0
     e3e:	11 24       	eor	r1, r1
     e40:	08 95       	ret

00000e42 <nrfWaitForAck>:
// from Wouter + nrfGetMaxTimeout()
// TODO?  iAckTimer zou ook een globale waarde kunnen zijn,
//        die bij init bepaald of bij setRetries gezet wordt
//        is nrfFlushRx nodig ??
uint8_t nrfWaitForAck(void)
{
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
     e46:	0e 94 06 07 	call	0xe0c	; 0xe0c <nrfGetMaxTimeout>
     e4a:	9c 01       	movw	r18, r24
     e4c:	36 95       	lsr	r19
     e4e:	27 95       	ror	r18
     e50:	36 95       	lsr	r19
     e52:	27 95       	ror	r18
     e54:	ab e7       	ldi	r26, 0x7B	; 123
     e56:	b4 e1       	ldi	r27, 0x14	; 20
     e58:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__umulhisi3>
     e5c:	ec 01       	movw	r28, r24
     e5e:	d6 95       	lsr	r29
     e60:	c7 95       	ror	r28
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     e62:	20 97       	sbiw	r28, 0x00	; 0
     e64:	71 f0       	breq	.+28     	; 0xe82 <nrfWaitForAck+0x40>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     e66:	87 e0       	ldi	r24, 0x07	; 7
     e68:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
    iAckTimer--;
     e6c:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e6e:	ef e1       	ldi	r30, 0x1F	; 31
     e70:	f3 e0       	ldi	r31, 0x03	; 3
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <nrfWaitForAck+0x30>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <nrfWaitForAck+0x36>
     e78:	00 00       	nop
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     e7a:	80 73       	andi	r24, 0x30	; 48
     e7c:	11 f4       	brne	.+4      	; 0xe82 <nrfWaitForAck+0x40>
     e7e:	20 97       	sbiw	r28, 0x00	; 0
     e80:	91 f7       	brne	.-28     	; 0xe66 <nrfWaitForAck+0x24>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
    iAckTimer--;
    _delay_us(100);
  }
  iSucces = nrfReadRegister(REG_STATUS) & NRF_STATUS_TX_DS_bm;
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	0e 94 53 04 	call	0x8a6	; 0x8a6 <nrfReadRegister>
     e88:	c8 2f       	mov	r28, r24

  nrfFlushRx();       // ??
     e8a:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrfFlushRx>
  nrfFlushTx();       // Flush TX FIFO because of MAX_RT
     e8e:	0e 94 6b 05 	call	0xad6	; 0xad6 <nrfFlushTx>
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm|NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     e92:	60 e7       	ldi	r22, 0x70	; 112
     e94:	87 e0       	ldi	r24, 0x07	; 7
     e96:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>

  return(iSucces);    // Returns 32 on ACK received, 0 on time out
}
     e9a:	8c 2f       	mov	r24, r28
     e9c:	80 72       	andi	r24, 0x20	; 32
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <nrfWrite>:
uint8_t nrfWrite( uint8_t* buf, uint8_t len)
{
  uint8_t iReturn;

  //nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD_NO_ACK);
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);
     ea4:	40 ea       	ldi	r20, 0xA0	; 160
     ea6:	0e 94 b7 05 	call	0xb6e	; 0xb6e <nrfStartWrite>

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out
     eaa:	0e 94 21 07 	call	0xe42	; 0xe42 <nrfWaitForAck>

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     eae:	08 95       	ret

00000eb0 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     eb0:	60 e7       	ldi	r22, 0x70	; 112
     eb2:	87 e0       	ldi	r24, 0x07	; 7
     eb4:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
     eb8:	08 95       	ret

00000eba <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eba:	8f e3       	ldi	r24, 0x3F	; 63
     ebc:	9c e9       	ldi	r25, 0x9C	; 156
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <nrfBegin+0x4>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <nrfBegin+0xa>
     ec4:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     ec6:	6f e5       	ldi	r22, 0x5F	; 95
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     ed4:	80 e2       	ldi	r24, 0x20	; 32
     ed6:	0e 94 dd 06 	call	0xdba	; 0xdba <nrfSetDataRate>
     eda:	88 23       	and	r24, r24
     edc:	19 f0       	breq	.+6      	; 0xee4 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 dd 06 	call	0xdba	; 0xdba <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     eea:	8c e0       	ldi	r24, 0x0C	; 12
     eec:	0e 94 f3 06 	call	0xde6	; 0xde6 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	8c e1       	ldi	r24, 0x1C	; 28
     ef4:	0e 94 93 04 	call	0x926	; 0x926 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     ef8:	8c e4       	ldi	r24, 0x4C	; 76
     efa:	0e 94 b7 06 	call	0xd6e	; 0xd6e <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     efe:	0e 94 58 07 	call	0xeb0	; 0xeb0 <nrfClearInterruptBits>
  nrfFlushRx();
     f02:	0e 94 5c 05 	call	0xab8	; 0xab8 <nrfFlushRx>
  nrfFlushTx();
     f06:	0e 94 6b 05 	call	0xad6	; 0xad6 <nrfFlushTx>
     f0a:	08 95       	ret

00000f0c <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f6 e0       	ldi	r31, 0x06	; 6
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     f1c:	e0 ea       	ldi	r30, 0xA0	; 160
     f1e:	f6 e0       	ldi	r31, 0x06	; 6
     f20:	80 e2       	ldi	r24, 0x20	; 32
     f22:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     f24:	80 e4       	ldi	r24, 0x40	; 64
     f26:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     f2c:	e0 ea       	ldi	r30, 0xA0	; 160
     f2e:	f8 e0       	ldi	r31, 0x08	; 8
     f30:	88 e1       	ldi	r24, 0x18	; 24
     f32:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     f34:	80 ec       	ldi	r24, 0xC0	; 192
     f36:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     f38:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	86 83       	std	Z+6, r24	; 0x06
     f3e:	08 95       	ret

00000f40 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     f40:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     f44:	e0 ea       	ldi	r30, 0xA0	; 160
     f46:	f8 e0       	ldi	r31, 0x08	; 8
     f48:	81 81       	ldd	r24, Z+1	; 0x01
     f4a:	86 ff       	sbrs	r24, 6
     f4c:	fd cf       	rjmp	.-6      	; 0xf48 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     f4e:	e0 ea       	ldi	r30, 0xA0	; 160
     f50:	f8 e0       	ldi	r31, 0x08	; 8
     f52:	81 81       	ldd	r24, Z+1	; 0x01
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     f58:	80 81       	ld	r24, Z
}
     f5a:	08 95       	ret

00000f5c <CanRead_F0>:
    }
  }
  *p = '\0';

  return buf;
}
     f5c:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rx_f0_wridx>
     f60:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <rx_f0_rdidx>
     f64:	89 17       	cp	r24, r25
     f66:	10 f0       	brcs	.+4      	; 0xf6c <CanRead_F0+0x10>
     f68:	89 1b       	sub	r24, r25
     f6a:	08 95       	ret
     f6c:	8c 59       	subi	r24, 0x9C	; 156
     f6e:	89 1b       	sub	r24, r25
     f70:	08 95       	ret

00000f72 <ReadByte_F0>:
     f72:	cf 93       	push	r28
     f74:	c0 91 cb 20 	lds	r28, 0x20CB	; 0x8020cb <rx_f0_rdidx>
     f78:	0e 94 ae 07 	call	0xf5c	; 0xf5c <CanRead_F0>
     f7c:	88 23       	and	r24, r24
     f7e:	e1 f3       	breq	.-8      	; 0xf78 <ReadByte_F0+0x6>
     f80:	ec 2f       	mov	r30, r28
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	e9 59       	subi	r30, 0x99	; 153
     f86:	ff 4d       	sbci	r31, 0xDF	; 223
     f88:	80 81       	ld	r24, Z
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	9c 0f       	add	r25, r28
     f8e:	94 36       	cpi	r25, 0x64	; 100
     f90:	08 f0       	brcs	.+2      	; 0xf94 <ReadByte_F0+0x22>
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 cb 20 	sts	0x20CB, r25	; 0x8020cb <rx_f0_rdidx>
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <uartF0_fgetc>:
     f9c:	0e 94 b9 07 	call	0xf72	; 0xf72 <ReadByte_F0>
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	08 95       	ret

00000fa4 <CanWrite_F0>:
     fa4:	20 91 32 21 	lds	r18, 0x2132	; 0x802132 <tx_f0_wridx>
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	92 0f       	add	r25, r18
     fac:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <tx_f0_rdidx>
     fb0:	94 36       	cpi	r25, 0x64	; 100
     fb2:	10 f0       	brcs	.+4      	; 0xfb8 <CanWrite_F0+0x14>
     fb4:	9d e9       	ldi	r25, 0x9D	; 157
     fb6:	92 0f       	add	r25, r18
     fb8:	89 17       	cp	r24, r25
     fba:	10 f0       	brcs	.+4      	; 0xfc0 <CanWrite_F0+0x1c>
     fbc:	89 1b       	sub	r24, r25
     fbe:	08 95       	ret
     fc0:	8c 59       	subi	r24, 0x9C	; 156
     fc2:	89 1b       	sub	r24, r25
     fc4:	08 95       	ret

00000fc6 <WriteByte_F0>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	d8 2f       	mov	r29, r24
     fd0:	00 ea       	ldi	r16, 0xA0	; 160
     fd2:	1b e0       	ldi	r17, 0x0B	; 11
     fd4:	c1 e2       	ldi	r28, 0x21	; 33
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <WriteByte_F0+0x16>
     fd8:	f8 01       	movw	r30, r16
     fda:	c3 83       	std	Z+3, r28	; 0x03
     fdc:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CanWrite_F0>
     fe0:	88 23       	and	r24, r24
     fe2:	d1 f3       	breq	.-12     	; 0xfd8 <WriteByte_F0+0x12>
     fe4:	80 91 32 21 	lds	r24, 0x2132	; 0x802132 <tx_f0_wridx>
     fe8:	e8 2f       	mov	r30, r24
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	e3 53       	subi	r30, 0x33	; 51
     fee:	ff 4d       	sbci	r31, 0xDF	; 223
     ff0:	d0 83       	st	Z, r29
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	84 36       	cpi	r24, 0x64	; 100
     ff6:	08 f0       	brcs	.+2      	; 0xffa <WriteByte_F0+0x34>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	e0 ea       	ldi	r30, 0xA0	; 160
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	92 81       	ldd	r25, Z+2	; 0x02
    1000:	29 2f       	mov	r18, r25
    1002:	2e 7f       	andi	r18, 0xFE	; 254
    1004:	22 83       	std	Z+2, r18	; 0x02
    1006:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <tx_f0_wridx>
    100a:	81 e2       	ldi	r24, 0x21	; 33
    100c:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
    1010:	92 83       	std	Z+2, r25	; 0x02
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <uartF0_fputc>:
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	d8 2f       	mov	r29, r24
    1022:	cf ef       	ldi	r28, 0xFF	; 255
    1024:	03 c0       	rjmp	.+6      	; 0x102c <uartF0_fputc+0x10>
    1026:	cc 23       	and	r28, r28
    1028:	91 f0       	breq	.+36     	; 0x104e <uartF0_fputc+0x32>
    102a:	c1 50       	subi	r28, 0x01	; 1
    102c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <CanWrite_F0>
    1030:	88 23       	and	r24, r24
    1032:	c9 f3       	breq	.-14     	; 0x1026 <uartF0_fputc+0xa>
    1034:	cc 23       	and	r28, r28
    1036:	71 f0       	breq	.+28     	; 0x1054 <uartF0_fputc+0x38>
    1038:	da 30       	cpi	r29, 0x0A	; 10
    103a:	19 f4       	brne	.+6      	; 0x1042 <uartF0_fputc+0x26>
    103c:	8d e0       	ldi	r24, 0x0D	; 13
    103e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <WriteByte_F0>
    1042:	8d 2f       	mov	r24, r29
    1044:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <WriteByte_F0>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <uartF0_fputc+0x3c>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <uartF0_fputc+0x3c>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <init_stream>:
 *           If you want to use another baud rate you can change it in this function.
 *
 *  \return  void
 */
void init_stream(uint32_t f_cpu)
{
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	8f 92       	push	r8
    1068:	9f 92       	push	r9
    106a:	af 92       	push	r10
    106c:	bf 92       	push	r11
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	4b 01       	movw	r8, r22
    107a:	5c 01       	movw	r10, r24
    107c:	07 e0       	ldi	r16, 0x07	; 7
    107e:	10 e0       	ldi	r17, 0x00	; 0
static int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    1080:	c9 ef       	ldi	r28, 0xF9	; 249

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    1082:	ee 24       	eor	r14, r14
    1084:	e3 94       	inc	r14
    1086:	f1 2c       	mov	r15, r1
static uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
    1088:	cc 23       	and	r28, r28
    108a:	54 f5       	brge	.+84     	; 0x10e0 <init_stream+0x82>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
    108c:	c5 01       	movw	r24, r10
    108e:	b4 01       	movw	r22, r8
    1090:	0e 94 97 0a 	call	0x152e	; 0x152e <__floatunsisf>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	41 ee       	ldi	r20, 0xE1	; 225
    109a:	59 e4       	ldi	r21, 0x49	; 73
    109c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 89 09 	call	0x1312	; 0x1312 <__subsf3>
    10ac:	2b 01       	movw	r4, r22
    10ae:	3c 01       	movw	r6, r24
    10b0:	b7 01       	movw	r22, r14
    10b2:	00 2e       	mov	r0, r16
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <init_stream+0x5c>
    10b6:	66 0f       	add	r22, r22
    10b8:	77 1f       	adc	r23, r23
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <init_stream+0x58>
    10be:	07 2e       	mov	r0, r23
    10c0:	00 0c       	add	r0, r0
    10c2:	88 0b       	sbc	r24, r24
    10c4:	99 0b       	sbc	r25, r25
    10c6:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
    10ca:	9b 01       	movw	r18, r22
    10cc:	ac 01       	movw	r20, r24
    10ce:	c3 01       	movw	r24, r6
    10d0:	b2 01       	movw	r22, r4
    10d2:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
    10d6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <round>
    10da:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
    10de:	2c c0       	rjmp	.+88     	; 0x1138 <init_stream+0xda>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    10e0:	c5 01       	movw	r24, r10
    10e2:	b4 01       	movw	r22, r8
    10e4:	0e 94 97 0a 	call	0x152e	; 0x152e <__floatunsisf>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	41 ee       	ldi	r20, 0xE1	; 225
    10ee:	59 e4       	ldi	r21, 0x49	; 73
    10f0:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    10f4:	2b 01       	movw	r4, r22
    10f6:	3c 01       	movw	r6, r24
    10f8:	88 27       	eor	r24, r24
    10fa:	99 27       	eor	r25, r25
    10fc:	80 1b       	sub	r24, r16
    10fe:	91 0b       	sbc	r25, r17
    1100:	b7 01       	movw	r22, r14
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <init_stream+0xaa>
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <init_stream+0xa6>
    110c:	07 2e       	mov	r0, r23
    110e:	00 0c       	add	r0, r0
    1110:	88 0b       	sbc	r24, r24
    1112:	99 0b       	sbc	r25, r25
    1114:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	c3 01       	movw	r24, r6
    111e:	b2 01       	movw	r22, r4
    1120:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	0e 94 89 09 	call	0x1312	; 0x1312 <__subsf3>
    1130:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <round>
    1134:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
    1138:	61 15       	cp	r22, r1
    113a:	70 41       	sbci	r23, 0x10	; 16
    113c:	38 f0       	brcs	.+14     	; 0x114c <init_stream+0xee>
    113e:	cf 5f       	subi	r28, 0xFF	; 255
    1140:	01 50       	subi	r16, 0x01	; 1
    1142:	11 09       	sbc	r17, r1
static int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    1144:	c8 30       	cpi	r28, 0x08	; 8
    1146:	09 f0       	breq	.+2      	; 0x114a <init_stream+0xec>
    1148:	9f cf       	rjmp	.-194    	; 0x1088 <init_stream+0x2a>
    114a:	31 c0       	rjmp	.+98     	; 0x11ae <init_stream+0x150>
static uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
  if ( scale < 0 ) {
    114c:	cc 23       	and	r28, r28
    114e:	7c f5       	brge	.+94     	; 0x11ae <init_stream+0x150>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
    1150:	c5 01       	movw	r24, r10
    1152:	b4 01       	movw	r22, r8
    1154:	0e 94 97 0a 	call	0x152e	; 0x152e <__floatunsisf>
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	41 ee       	ldi	r20, 0xE1	; 225
    115e:	59 e4       	ldi	r21, 0x49	; 73
    1160:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 89 09 	call	0x1312	; 0x1312 <__subsf3>
    1170:	4b 01       	movw	r8, r22
    1172:	5c 01       	movw	r10, r24
    1174:	2c 2f       	mov	r18, r28
    1176:	33 27       	eor	r19, r19
    1178:	21 95       	neg	r18
    117a:	0c f4       	brge	.+2      	; 0x117e <init_stream+0x120>
    117c:	30 95       	com	r19
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <init_stream+0x12a>
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	2a 95       	dec	r18
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <init_stream+0x126>
    118c:	07 2e       	mov	r0, r23
    118e:	00 0c       	add	r0, r0
    1190:	88 0b       	sbc	r24, r24
    1192:	99 0b       	sbc	r25, r25
    1194:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	c5 01       	movw	r24, r10
    119e:	b4 01       	movw	r22, r8
    11a0:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
    11a4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <round>
    11a8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
    11ac:	2a c0       	rjmp	.+84     	; 0x1202 <init_stream+0x1a4>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    11ae:	c5 01       	movw	r24, r10
    11b0:	b4 01       	movw	r22, r8
    11b2:	0e 94 97 0a 	call	0x152e	; 0x152e <__floatunsisf>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	41 ee       	ldi	r20, 0xE1	; 225
    11bc:	59 e4       	ldi	r21, 0x49	; 73
    11be:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    11c2:	4b 01       	movw	r8, r22
    11c4:	5c 01       	movw	r10, r24
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	0c 2e       	mov	r0, r28
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <init_stream+0x174>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <init_stream+0x170>
    11d6:	07 2e       	mov	r0, r23
    11d8:	00 0c       	add	r0, r0
    11da:	88 0b       	sbc	r24, r24
    11dc:	99 0b       	sbc	r25, r25
    11de:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	c5 01       	movw	r24, r10
    11e8:	b4 01       	movw	r22, r8
    11ea:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__divsf3>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e8       	ldi	r20, 0x80	; 128
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	0e 94 89 09 	call	0x1312	; 0x1312 <__subsf3>
    11fa:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <round>
    11fe:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixunssfsi>
  int8_t bscale;

  bscale = calc_bscale(f_cpu, BAUD_115K2, UART_NO_DOUBLE_CLK);
  bsel   = calc_bsel(f_cpu, BAUD_115K2, bscale, UART_NO_DOUBLE_CLK);

	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;  // pullup on rx
    1202:	e0 ea       	ldi	r30, 0xA0	; 160
    1204:	f6 e0       	ldi	r31, 0x06	; 6
    1206:	88 e1       	ldi	r24, 0x18	; 24
    1208:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.OUTSET = PIN3_bm;               // tx high
    120a:	98 e0       	ldi	r25, 0x08	; 8
    120c:	95 83       	std	Z+5, r25	; 0x05
	PORTF.DIRSET = PIN3_bm;
    120e:	91 83       	std	Z+1, r25	; 0x01
	PORTF.DIRCLR = PIN2_bm;
    1210:	94 e0       	ldi	r25, 0x04	; 4
    1212:	92 83       	std	Z+2, r25	; 0x02

	USARTF0.BAUDCTRLA = (bsel & USART_BSEL_gm);
    1214:	e0 ea       	ldi	r30, 0xA0	; 160
    1216:	fb e0       	ldi	r31, 0x0B	; 11
    1218:	66 83       	std	Z+6, r22	; 0x06
	USARTF0.BAUDCTRLB = ((bscale << USART_BSCALE_gp) & USART_BSCALE_gm) |
    121a:	7f 70       	andi	r23, 0x0F	; 15
    121c:	c2 95       	swap	r28
    121e:	c0 7f       	andi	r28, 0xF0	; 240
    1220:	c7 2b       	or	r28, r23
    1222:	c7 83       	std	Z+7, r28	; 0x07
                      ((bsel >> 8) & ~USART_BSCALE_gm);
	
 	USARTF0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1224:	84 83       	std	Z+4, r24	; 0x04

	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | 
    1226:	80 e2       	ldi	r24, 0x20	; 32
    1228:	83 83       	std	Z+3, r24	; 0x03
                  USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    122a:	e0 ea       	ldi	r30, 0xA0	; 160
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	83 60       	ori	r24, 0x03	; 3
    1232:	82 83       	std	Z+2, r24	; 0x02
  stdout = stdin = &uartF0_stdinout;
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f1 e2       	ldi	r31, 0x21	; 33
    1238:	8f e0       	ldi	r24, 0x0F	; 15
    123a:	90 e2       	ldi	r25, 0x20	; 32
    123c:	80 83       	st	Z, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
    1240:	82 83       	std	Z+2, r24	; 0x02
    1242:	93 83       	std	Z+3, r25	; 0x03
	
} // init_stream
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	bf 90       	pop	r11
    1250:	af 90       	pop	r10
    1252:	9f 90       	pop	r9
    1254:	8f 90       	pop	r8
    1256:	7f 90       	pop	r7
    1258:	6f 90       	pop	r6
    125a:	5f 90       	pop	r5
    125c:	4f 90       	pop	r4
    125e:	08 95       	ret

00001260 <__vector_119>:
} // WriteByte_F0 

/*  \brief  ISR for receiving bytes from UARTF0.
 *          It puts the received byte in the RX buffer
 */
ISR(USARTF0_RXC_vect) {
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	0b b6       	in	r0, 0x3b	; 59
    126c:	0f 92       	push	r0
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_f0_wridx;
    1276:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <rx_f0_wridx>
	rx_f0_buf[curSlot] = USARTF0.DATA;
    127a:	e8 2f       	mov	r30, r24
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    1282:	e9 59       	subi	r30, 0x99	; 153
    1284:	ff 4d       	sbci	r31, 0xDF	; 223
    1286:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    1288:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_F0)
    128a:	84 36       	cpi	r24, 0x64	; 100
    128c:	08 f0       	brcs	.+2      	; 0x1290 <__vector_119+0x30>
	nextSlot = 0;
    128e:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_f0_rdidx)
    1290:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <rx_f0_rdidx>
    1294:	89 13       	cpse	r24, r25
	rx_f0_wridx = nextSlot;
    1296:	80 93 cc 20 	sts	0x20CC, r24	; 0x8020cc <rx_f0_wridx>
	
} // ISR(USARTF0_RXC_vect)
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	0f 90       	pop	r0
    12a4:	0b be       	out	0x3b, r0	; 59
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_120>:


/*  \brief  ISR for transmitting bytes to UARTF0.
 *          If there is a byte to send in the TX buffer, it will be send
 */
ISR(USARTF0_DRE_vect) {
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	0b b6       	in	r0, 0x3b	; 59
    12bc:	0f 92       	push	r0
    12be:	2f 93       	push	r18
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	ef 93       	push	r30
    12c6:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_f0_rdidx;
    12c8:	80 91 31 21 	lds	r24, 0x2131	; 0x802131 <tx_f0_rdidx>
	lastSlot = tx_f0_wridx;
    12cc:	90 91 32 21 	lds	r25, 0x2132	; 0x802132 <tx_f0_wridx>
	
	if(curSlot != lastSlot) {
    12d0:	89 17       	cp	r24, r25
    12d2:	69 f0       	breq	.+26     	; 0x12ee <__vector_120+0x3e>
		USARTF0.DATA = tx_f0_buf[curSlot];
    12d4:	e8 2f       	mov	r30, r24
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	e3 53       	subi	r30, 0x33	; 51
    12da:	ff 4d       	sbci	r31, 0xDF	; 223
    12dc:	20 81       	ld	r18, Z
    12de:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_F0)
    12e4:	84 36       	cpi	r24, 0x64	; 100
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__vector_120+0x3a>
		nextSlot = 0;
    12e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    12ea:	89 13       	cpse	r24, r25
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
    12f4:	89 2f       	mov	r24, r25
	
	tx_f0_rdidx = nextSlot;
    12f6:	80 93 31 21 	sts	0x2131, r24	; 0x802131 <tx_f0_rdidx>
	
} // ISR(USARTF0_DRE_vect) 
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0b be       	out	0x3b, r0	; 59
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__subsf3>:
    1312:	50 58       	subi	r21, 0x80	; 128

00001314 <__addsf3>:
    1314:	bb 27       	eor	r27, r27
    1316:	aa 27       	eor	r26, r26
    1318:	0e 94 a1 09 	call	0x1342	; 0x1342 <__addsf3x>
    131c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_round>
    1320:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_pscA>
    1324:	38 f0       	brcs	.+14     	; 0x1334 <__addsf3+0x20>
    1326:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_pscB>
    132a:	20 f0       	brcs	.+8      	; 0x1334 <__addsf3+0x20>
    132c:	39 f4       	brne	.+14     	; 0x133c <__addsf3+0x28>
    132e:	9f 3f       	cpi	r25, 0xFF	; 255
    1330:	19 f4       	brne	.+6      	; 0x1338 <__addsf3+0x24>
    1332:	26 f4       	brtc	.+8      	; 0x133c <__addsf3+0x28>
    1334:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>
    1338:	0e f4       	brtc	.+2      	; 0x133c <__addsf3+0x28>
    133a:	e0 95       	com	r30
    133c:	e7 fb       	bst	r30, 7
    133e:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>

00001342 <__addsf3x>:
    1342:	e9 2f       	mov	r30, r25
    1344:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_split3>
    1348:	58 f3       	brcs	.-42     	; 0x1320 <__addsf3+0xc>
    134a:	ba 17       	cp	r27, r26
    134c:	62 07       	cpc	r22, r18
    134e:	73 07       	cpc	r23, r19
    1350:	84 07       	cpc	r24, r20
    1352:	95 07       	cpc	r25, r21
    1354:	20 f0       	brcs	.+8      	; 0x135e <__addsf3x+0x1c>
    1356:	79 f4       	brne	.+30     	; 0x1376 <__addsf3x+0x34>
    1358:	a6 f5       	brtc	.+104    	; 0x13c2 <__addsf3x+0x80>
    135a:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_zero>
    135e:	0e f4       	brtc	.+2      	; 0x1362 <__addsf3x+0x20>
    1360:	e0 95       	com	r30
    1362:	0b 2e       	mov	r0, r27
    1364:	ba 2f       	mov	r27, r26
    1366:	a0 2d       	mov	r26, r0
    1368:	0b 01       	movw	r0, r22
    136a:	b9 01       	movw	r22, r18
    136c:	90 01       	movw	r18, r0
    136e:	0c 01       	movw	r0, r24
    1370:	ca 01       	movw	r24, r20
    1372:	a0 01       	movw	r20, r0
    1374:	11 24       	eor	r1, r1
    1376:	ff 27       	eor	r31, r31
    1378:	59 1b       	sub	r21, r25
    137a:	99 f0       	breq	.+38     	; 0x13a2 <__addsf3x+0x60>
    137c:	59 3f       	cpi	r21, 0xF9	; 249
    137e:	50 f4       	brcc	.+20     	; 0x1394 <__addsf3x+0x52>
    1380:	50 3e       	cpi	r21, 0xE0	; 224
    1382:	68 f1       	brcs	.+90     	; 0x13de <__addsf3x+0x9c>
    1384:	1a 16       	cp	r1, r26
    1386:	f0 40       	sbci	r31, 0x00	; 0
    1388:	a2 2f       	mov	r26, r18
    138a:	23 2f       	mov	r18, r19
    138c:	34 2f       	mov	r19, r20
    138e:	44 27       	eor	r20, r20
    1390:	58 5f       	subi	r21, 0xF8	; 248
    1392:	f3 cf       	rjmp	.-26     	; 0x137a <__addsf3x+0x38>
    1394:	46 95       	lsr	r20
    1396:	37 95       	ror	r19
    1398:	27 95       	ror	r18
    139a:	a7 95       	ror	r26
    139c:	f0 40       	sbci	r31, 0x00	; 0
    139e:	53 95       	inc	r21
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <__addsf3x+0x52>
    13a2:	7e f4       	brtc	.+30     	; 0x13c2 <__addsf3x+0x80>
    13a4:	1f 16       	cp	r1, r31
    13a6:	ba 0b       	sbc	r27, r26
    13a8:	62 0b       	sbc	r22, r18
    13aa:	73 0b       	sbc	r23, r19
    13ac:	84 0b       	sbc	r24, r20
    13ae:	ba f0       	brmi	.+46     	; 0x13de <__addsf3x+0x9c>
    13b0:	91 50       	subi	r25, 0x01	; 1
    13b2:	a1 f0       	breq	.+40     	; 0x13dc <__addsf3x+0x9a>
    13b4:	ff 0f       	add	r31, r31
    13b6:	bb 1f       	adc	r27, r27
    13b8:	66 1f       	adc	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	c2 f7       	brpl	.-16     	; 0x13b0 <__addsf3x+0x6e>
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <__addsf3x+0x9c>
    13c2:	ba 0f       	add	r27, r26
    13c4:	62 1f       	adc	r22, r18
    13c6:	73 1f       	adc	r23, r19
    13c8:	84 1f       	adc	r24, r20
    13ca:	48 f4       	brcc	.+18     	; 0x13de <__addsf3x+0x9c>
    13cc:	87 95       	ror	r24
    13ce:	77 95       	ror	r23
    13d0:	67 95       	ror	r22
    13d2:	b7 95       	ror	r27
    13d4:	f7 95       	ror	r31
    13d6:	9e 3f       	cpi	r25, 0xFE	; 254
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <__addsf3x+0x9a>
    13da:	b0 cf       	rjmp	.-160    	; 0x133c <__addsf3+0x28>
    13dc:	93 95       	inc	r25
    13de:	88 0f       	add	r24, r24
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <__addsf3x+0xa2>
    13e2:	99 27       	eor	r25, r25
    13e4:	ee 0f       	add	r30, r30
    13e6:	97 95       	ror	r25
    13e8:	87 95       	ror	r24
    13ea:	08 95       	ret

000013ec <__divsf3>:
    13ec:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__divsf3x>
    13f0:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_round>
    13f4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_pscB>
    13f8:	58 f0       	brcs	.+22     	; 0x1410 <__divsf3+0x24>
    13fa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_pscA>
    13fe:	40 f0       	brcs	.+16     	; 0x1410 <__divsf3+0x24>
    1400:	29 f4       	brne	.+10     	; 0x140c <__divsf3+0x20>
    1402:	5f 3f       	cpi	r21, 0xFF	; 255
    1404:	29 f0       	breq	.+10     	; 0x1410 <__divsf3+0x24>
    1406:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    140a:	51 11       	cpse	r21, r1
    140c:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>
    1410:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>

00001414 <__divsf3x>:
    1414:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_split3>
    1418:	68 f3       	brcs	.-38     	; 0x13f4 <__divsf3+0x8>

0000141a <__divsf3_pse>:
    141a:	99 23       	and	r25, r25
    141c:	b1 f3       	breq	.-20     	; 0x140a <__divsf3+0x1e>
    141e:	55 23       	and	r21, r21
    1420:	91 f3       	breq	.-28     	; 0x1406 <__divsf3+0x1a>
    1422:	95 1b       	sub	r25, r21
    1424:	55 0b       	sbc	r21, r21
    1426:	bb 27       	eor	r27, r27
    1428:	aa 27       	eor	r26, r26
    142a:	62 17       	cp	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	84 07       	cpc	r24, r20
    1430:	38 f0       	brcs	.+14     	; 0x1440 <__divsf3_pse+0x26>
    1432:	9f 5f       	subi	r25, 0xFF	; 255
    1434:	5f 4f       	sbci	r21, 0xFF	; 255
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	44 1f       	adc	r20, r20
    143c:	aa 1f       	adc	r26, r26
    143e:	a9 f3       	breq	.-22     	; 0x142a <__divsf3_pse+0x10>
    1440:	35 d0       	rcall	.+106    	; 0x14ac <__divsf3_pse+0x92>
    1442:	0e 2e       	mov	r0, r30
    1444:	3a f0       	brmi	.+14     	; 0x1454 <__divsf3_pse+0x3a>
    1446:	e0 e8       	ldi	r30, 0x80	; 128
    1448:	32 d0       	rcall	.+100    	; 0x14ae <__divsf3_pse+0x94>
    144a:	91 50       	subi	r25, 0x01	; 1
    144c:	50 40       	sbci	r21, 0x00	; 0
    144e:	e6 95       	lsr	r30
    1450:	00 1c       	adc	r0, r0
    1452:	ca f7       	brpl	.-14     	; 0x1446 <__divsf3_pse+0x2c>
    1454:	2b d0       	rcall	.+86     	; 0x14ac <__divsf3_pse+0x92>
    1456:	fe 2f       	mov	r31, r30
    1458:	29 d0       	rcall	.+82     	; 0x14ac <__divsf3_pse+0x92>
    145a:	66 0f       	add	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	bb 1f       	adc	r27, r27
    1462:	26 17       	cp	r18, r22
    1464:	37 07       	cpc	r19, r23
    1466:	48 07       	cpc	r20, r24
    1468:	ab 07       	cpc	r26, r27
    146a:	b0 e8       	ldi	r27, 0x80	; 128
    146c:	09 f0       	breq	.+2      	; 0x1470 <__divsf3_pse+0x56>
    146e:	bb 0b       	sbc	r27, r27
    1470:	80 2d       	mov	r24, r0
    1472:	bf 01       	movw	r22, r30
    1474:	ff 27       	eor	r31, r31
    1476:	93 58       	subi	r25, 0x83	; 131
    1478:	5f 4f       	sbci	r21, 0xFF	; 255
    147a:	3a f0       	brmi	.+14     	; 0x148a <__divsf3_pse+0x70>
    147c:	9e 3f       	cpi	r25, 0xFE	; 254
    147e:	51 05       	cpc	r21, r1
    1480:	78 f0       	brcs	.+30     	; 0x14a0 <__divsf3_pse+0x86>
    1482:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    1486:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>
    148a:	5f 3f       	cpi	r21, 0xFF	; 255
    148c:	e4 f3       	brlt	.-8      	; 0x1486 <__divsf3_pse+0x6c>
    148e:	98 3e       	cpi	r25, 0xE8	; 232
    1490:	d4 f3       	brlt	.-12     	; 0x1486 <__divsf3_pse+0x6c>
    1492:	86 95       	lsr	r24
    1494:	77 95       	ror	r23
    1496:	67 95       	ror	r22
    1498:	b7 95       	ror	r27
    149a:	f7 95       	ror	r31
    149c:	9f 5f       	subi	r25, 0xFF	; 255
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__divsf3_pse+0x78>
    14a0:	88 0f       	add	r24, r24
    14a2:	91 1d       	adc	r25, r1
    14a4:	96 95       	lsr	r25
    14a6:	87 95       	ror	r24
    14a8:	97 f9       	bld	r25, 7
    14aa:	08 95       	ret
    14ac:	e1 e0       	ldi	r30, 0x01	; 1
    14ae:	66 0f       	add	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	bb 1f       	adc	r27, r27
    14b6:	62 17       	cp	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	84 07       	cpc	r24, r20
    14bc:	ba 07       	cpc	r27, r26
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__divsf3_pse+0xae>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	ba 0b       	sbc	r27, r26
    14c8:	ee 1f       	adc	r30, r30
    14ca:	88 f7       	brcc	.-30     	; 0x14ae <__divsf3_pse+0x94>
    14cc:	e0 95       	com	r30
    14ce:	08 95       	ret

000014d0 <__fixunssfsi>:
    14d0:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_splitA>
    14d4:	88 f0       	brcs	.+34     	; 0x14f8 <__fixunssfsi+0x28>
    14d6:	9f 57       	subi	r25, 0x7F	; 127
    14d8:	98 f0       	brcs	.+38     	; 0x1500 <__fixunssfsi+0x30>
    14da:	b9 2f       	mov	r27, r25
    14dc:	99 27       	eor	r25, r25
    14de:	b7 51       	subi	r27, 0x17	; 23
    14e0:	b0 f0       	brcs	.+44     	; 0x150e <__fixunssfsi+0x3e>
    14e2:	e1 f0       	breq	.+56     	; 0x151c <__fixunssfsi+0x4c>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	88 1f       	adc	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	1a f0       	brmi	.+6      	; 0x14f4 <__fixunssfsi+0x24>
    14ee:	ba 95       	dec	r27
    14f0:	c9 f7       	brne	.-14     	; 0x14e4 <__fixunssfsi+0x14>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <__fixunssfsi+0x4c>
    14f4:	b1 30       	cpi	r27, 0x01	; 1
    14f6:	91 f0       	breq	.+36     	; 0x151c <__fixunssfsi+0x4c>
    14f8:	0e 94 1e 0b 	call	0x163c	; 0x163c <__fp_zero>
    14fc:	b1 e0       	ldi	r27, 0x01	; 1
    14fe:	08 95       	ret
    1500:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_zero>
    1504:	67 2f       	mov	r22, r23
    1506:	78 2f       	mov	r23, r24
    1508:	88 27       	eor	r24, r24
    150a:	b8 5f       	subi	r27, 0xF8	; 248
    150c:	39 f0       	breq	.+14     	; 0x151c <__fixunssfsi+0x4c>
    150e:	b9 3f       	cpi	r27, 0xF9	; 249
    1510:	cc f3       	brlt	.-14     	; 0x1504 <__fixunssfsi+0x34>
    1512:	86 95       	lsr	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b3 95       	inc	r27
    151a:	d9 f7       	brne	.-10     	; 0x1512 <__fixunssfsi+0x42>
    151c:	3e f4       	brtc	.+14     	; 0x152c <__fixunssfsi+0x5c>
    151e:	90 95       	com	r25
    1520:	80 95       	com	r24
    1522:	70 95       	com	r23
    1524:	61 95       	neg	r22
    1526:	7f 4f       	sbci	r23, 0xFF	; 255
    1528:	8f 4f       	sbci	r24, 0xFF	; 255
    152a:	9f 4f       	sbci	r25, 0xFF	; 255
    152c:	08 95       	ret

0000152e <__floatunsisf>:
    152e:	e8 94       	clt
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <__floatsisf+0x12>

00001532 <__floatsisf>:
    1532:	97 fb       	bst	r25, 7
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__floatsisf+0x12>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	99 23       	and	r25, r25
    1546:	a9 f0       	breq	.+42     	; 0x1572 <__floatsisf+0x40>
    1548:	f9 2f       	mov	r31, r25
    154a:	96 e9       	ldi	r25, 0x96	; 150
    154c:	bb 27       	eor	r27, r27
    154e:	93 95       	inc	r25
    1550:	f6 95       	lsr	r31
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	b7 95       	ror	r27
    155a:	f1 11       	cpse	r31, r1
    155c:	f8 cf       	rjmp	.-16     	; 0x154e <__floatsisf+0x1c>
    155e:	fa f4       	brpl	.+62     	; 0x159e <__floatsisf+0x6c>
    1560:	bb 0f       	add	r27, r27
    1562:	11 f4       	brne	.+4      	; 0x1568 <__floatsisf+0x36>
    1564:	60 ff       	sbrs	r22, 0
    1566:	1b c0       	rjmp	.+54     	; 0x159e <__floatsisf+0x6c>
    1568:	6f 5f       	subi	r22, 0xFF	; 255
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	8f 4f       	sbci	r24, 0xFF	; 255
    156e:	9f 4f       	sbci	r25, 0xFF	; 255
    1570:	16 c0       	rjmp	.+44     	; 0x159e <__floatsisf+0x6c>
    1572:	88 23       	and	r24, r24
    1574:	11 f0       	breq	.+4      	; 0x157a <__floatsisf+0x48>
    1576:	96 e9       	ldi	r25, 0x96	; 150
    1578:	11 c0       	rjmp	.+34     	; 0x159c <__floatsisf+0x6a>
    157a:	77 23       	and	r23, r23
    157c:	21 f0       	breq	.+8      	; 0x1586 <__floatsisf+0x54>
    157e:	9e e8       	ldi	r25, 0x8E	; 142
    1580:	87 2f       	mov	r24, r23
    1582:	76 2f       	mov	r23, r22
    1584:	05 c0       	rjmp	.+10     	; 0x1590 <__floatsisf+0x5e>
    1586:	66 23       	and	r22, r22
    1588:	71 f0       	breq	.+28     	; 0x15a6 <__floatsisf+0x74>
    158a:	96 e8       	ldi	r25, 0x86	; 134
    158c:	86 2f       	mov	r24, r22
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	2a f0       	brmi	.+10     	; 0x159e <__floatsisf+0x6c>
    1594:	9a 95       	dec	r25
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	da f7       	brpl	.-10     	; 0x1594 <__floatsisf+0x62>
    159e:	88 0f       	add	r24, r24
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret

000015a8 <__fp_inf>:
    15a8:	97 f9       	bld	r25, 7
    15aa:	9f 67       	ori	r25, 0x7F	; 127
    15ac:	80 e8       	ldi	r24, 0x80	; 128
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	08 95       	ret

000015b4 <__fp_nan>:
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
    15b6:	80 ec       	ldi	r24, 0xC0	; 192
    15b8:	08 95       	ret

000015ba <__fp_pscA>:
    15ba:	00 24       	eor	r0, r0
    15bc:	0a 94       	dec	r0
    15be:	16 16       	cp	r1, r22
    15c0:	17 06       	cpc	r1, r23
    15c2:	18 06       	cpc	r1, r24
    15c4:	09 06       	cpc	r0, r25
    15c6:	08 95       	ret

000015c8 <__fp_pscB>:
    15c8:	00 24       	eor	r0, r0
    15ca:	0a 94       	dec	r0
    15cc:	12 16       	cp	r1, r18
    15ce:	13 06       	cpc	r1, r19
    15d0:	14 06       	cpc	r1, r20
    15d2:	05 06       	cpc	r0, r21
    15d4:	08 95       	ret

000015d6 <__fp_round>:
    15d6:	09 2e       	mov	r0, r25
    15d8:	03 94       	inc	r0
    15da:	00 0c       	add	r0, r0
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__fp_round+0xc>
    15de:	88 23       	and	r24, r24
    15e0:	52 f0       	brmi	.+20     	; 0x15f6 <__fp_round+0x20>
    15e2:	bb 0f       	add	r27, r27
    15e4:	40 f4       	brcc	.+16     	; 0x15f6 <__fp_round+0x20>
    15e6:	bf 2b       	or	r27, r31
    15e8:	11 f4       	brne	.+4      	; 0x15ee <__fp_round+0x18>
    15ea:	60 ff       	sbrs	r22, 0
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <__fp_round+0x20>
    15ee:	6f 5f       	subi	r22, 0xFF	; 255
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	08 95       	ret

000015f8 <__fp_split3>:
    15f8:	57 fd       	sbrc	r21, 7
    15fa:	90 58       	subi	r25, 0x80	; 128
    15fc:	44 0f       	add	r20, r20
    15fe:	55 1f       	adc	r21, r21
    1600:	59 f0       	breq	.+22     	; 0x1618 <__fp_splitA+0x10>
    1602:	5f 3f       	cpi	r21, 0xFF	; 255
    1604:	71 f0       	breq	.+28     	; 0x1622 <__fp_splitA+0x1a>
    1606:	47 95       	ror	r20

00001608 <__fp_splitA>:
    1608:	88 0f       	add	r24, r24
    160a:	97 fb       	bst	r25, 7
    160c:	99 1f       	adc	r25, r25
    160e:	61 f0       	breq	.+24     	; 0x1628 <__fp_splitA+0x20>
    1610:	9f 3f       	cpi	r25, 0xFF	; 255
    1612:	79 f0       	breq	.+30     	; 0x1632 <__fp_splitA+0x2a>
    1614:	87 95       	ror	r24
    1616:	08 95       	ret
    1618:	12 16       	cp	r1, r18
    161a:	13 06       	cpc	r1, r19
    161c:	14 06       	cpc	r1, r20
    161e:	55 1f       	adc	r21, r21
    1620:	f2 cf       	rjmp	.-28     	; 0x1606 <__fp_split3+0xe>
    1622:	46 95       	lsr	r20
    1624:	f1 df       	rcall	.-30     	; 0x1608 <__fp_splitA>
    1626:	08 c0       	rjmp	.+16     	; 0x1638 <__fp_splitA+0x30>
    1628:	16 16       	cp	r1, r22
    162a:	17 06       	cpc	r1, r23
    162c:	18 06       	cpc	r1, r24
    162e:	99 1f       	adc	r25, r25
    1630:	f1 cf       	rjmp	.-30     	; 0x1614 <__fp_splitA+0xc>
    1632:	86 95       	lsr	r24
    1634:	71 05       	cpc	r23, r1
    1636:	61 05       	cpc	r22, r1
    1638:	08 94       	sec
    163a:	08 95       	ret

0000163c <__fp_zero>:
    163c:	e8 94       	clt

0000163e <__fp_szero>:
    163e:	bb 27       	eor	r27, r27
    1640:	66 27       	eor	r22, r22
    1642:	77 27       	eor	r23, r23
    1644:	cb 01       	movw	r24, r22
    1646:	97 f9       	bld	r25, 7
    1648:	08 95       	ret

0000164a <__mulsf3>:
    164a:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3x>
    164e:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_round>
    1652:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__fp_pscA>
    1656:	38 f0       	brcs	.+14     	; 0x1666 <__mulsf3+0x1c>
    1658:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <__fp_pscB>
    165c:	20 f0       	brcs	.+8      	; 0x1666 <__mulsf3+0x1c>
    165e:	95 23       	and	r25, r21
    1660:	11 f0       	breq	.+4      	; 0x1666 <__mulsf3+0x1c>
    1662:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    1666:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>
    166a:	11 24       	eor	r1, r1
    166c:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>

00001670 <__mulsf3x>:
    1670:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_split3>
    1674:	70 f3       	brcs	.-36     	; 0x1652 <__mulsf3+0x8>

00001676 <__mulsf3_pse>:
    1676:	95 9f       	mul	r25, r21
    1678:	c1 f3       	breq	.-16     	; 0x166a <__mulsf3+0x20>
    167a:	95 0f       	add	r25, r21
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	55 1f       	adc	r21, r21
    1680:	62 9f       	mul	r22, r18
    1682:	f0 01       	movw	r30, r0
    1684:	72 9f       	mul	r23, r18
    1686:	bb 27       	eor	r27, r27
    1688:	f0 0d       	add	r31, r0
    168a:	b1 1d       	adc	r27, r1
    168c:	63 9f       	mul	r22, r19
    168e:	aa 27       	eor	r26, r26
    1690:	f0 0d       	add	r31, r0
    1692:	b1 1d       	adc	r27, r1
    1694:	aa 1f       	adc	r26, r26
    1696:	64 9f       	mul	r22, r20
    1698:	66 27       	eor	r22, r22
    169a:	b0 0d       	add	r27, r0
    169c:	a1 1d       	adc	r26, r1
    169e:	66 1f       	adc	r22, r22
    16a0:	82 9f       	mul	r24, r18
    16a2:	22 27       	eor	r18, r18
    16a4:	b0 0d       	add	r27, r0
    16a6:	a1 1d       	adc	r26, r1
    16a8:	62 1f       	adc	r22, r18
    16aa:	73 9f       	mul	r23, r19
    16ac:	b0 0d       	add	r27, r0
    16ae:	a1 1d       	adc	r26, r1
    16b0:	62 1f       	adc	r22, r18
    16b2:	83 9f       	mul	r24, r19
    16b4:	a0 0d       	add	r26, r0
    16b6:	61 1d       	adc	r22, r1
    16b8:	22 1f       	adc	r18, r18
    16ba:	74 9f       	mul	r23, r20
    16bc:	33 27       	eor	r19, r19
    16be:	a0 0d       	add	r26, r0
    16c0:	61 1d       	adc	r22, r1
    16c2:	23 1f       	adc	r18, r19
    16c4:	84 9f       	mul	r24, r20
    16c6:	60 0d       	add	r22, r0
    16c8:	21 1d       	adc	r18, r1
    16ca:	82 2f       	mov	r24, r18
    16cc:	76 2f       	mov	r23, r22
    16ce:	6a 2f       	mov	r22, r26
    16d0:	11 24       	eor	r1, r1
    16d2:	9f 57       	subi	r25, 0x7F	; 127
    16d4:	50 40       	sbci	r21, 0x00	; 0
    16d6:	9a f0       	brmi	.+38     	; 0x16fe <__mulsf3_pse+0x88>
    16d8:	f1 f0       	breq	.+60     	; 0x1716 <__mulsf3_pse+0xa0>
    16da:	88 23       	and	r24, r24
    16dc:	4a f0       	brmi	.+18     	; 0x16f0 <__mulsf3_pse+0x7a>
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	bb 1f       	adc	r27, r27
    16e4:	66 1f       	adc	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	88 1f       	adc	r24, r24
    16ea:	91 50       	subi	r25, 0x01	; 1
    16ec:	50 40       	sbci	r21, 0x00	; 0
    16ee:	a9 f7       	brne	.-22     	; 0x16da <__mulsf3_pse+0x64>
    16f0:	9e 3f       	cpi	r25, 0xFE	; 254
    16f2:	51 05       	cpc	r21, r1
    16f4:	80 f0       	brcs	.+32     	; 0x1716 <__mulsf3_pse+0xa0>
    16f6:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    16fa:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>
    16fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1700:	e4 f3       	brlt	.-8      	; 0x16fa <__mulsf3_pse+0x84>
    1702:	98 3e       	cpi	r25, 0xE8	; 232
    1704:	d4 f3       	brlt	.-12     	; 0x16fa <__mulsf3_pse+0x84>
    1706:	86 95       	lsr	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	f7 95       	ror	r31
    1710:	e7 95       	ror	r30
    1712:	9f 5f       	subi	r25, 0xFF	; 255
    1714:	c1 f7       	brne	.-16     	; 0x1706 <__mulsf3_pse+0x90>
    1716:	fe 2b       	or	r31, r30
    1718:	88 0f       	add	r24, r24
    171a:	91 1d       	adc	r25, r1
    171c:	96 95       	lsr	r25
    171e:	87 95       	ror	r24
    1720:	97 f9       	bld	r25, 7
    1722:	08 95       	ret

00001724 <pow>:
    1724:	fa 01       	movw	r30, r20
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	30 96       	adiw	r30, 0x00	; 0
    172c:	21 05       	cpc	r18, r1
    172e:	31 05       	cpc	r19, r1
    1730:	a1 f1       	breq	.+104    	; 0x179a <pow+0x76>
    1732:	61 15       	cp	r22, r1
    1734:	71 05       	cpc	r23, r1
    1736:	61 f4       	brne	.+24     	; 0x1750 <pow+0x2c>
    1738:	80 38       	cpi	r24, 0x80	; 128
    173a:	bf e3       	ldi	r27, 0x3F	; 63
    173c:	9b 07       	cpc	r25, r27
    173e:	49 f1       	breq	.+82     	; 0x1792 <pow+0x6e>
    1740:	68 94       	set
    1742:	90 38       	cpi	r25, 0x80	; 128
    1744:	81 05       	cpc	r24, r1
    1746:	61 f0       	breq	.+24     	; 0x1760 <pow+0x3c>
    1748:	80 38       	cpi	r24, 0x80	; 128
    174a:	bf ef       	ldi	r27, 0xFF	; 255
    174c:	9b 07       	cpc	r25, r27
    174e:	41 f0       	breq	.+16     	; 0x1760 <pow+0x3c>
    1750:	99 23       	and	r25, r25
    1752:	4a f5       	brpl	.+82     	; 0x17a6 <pow+0x82>
    1754:	ff 3f       	cpi	r31, 0xFF	; 255
    1756:	e1 05       	cpc	r30, r1
    1758:	31 05       	cpc	r19, r1
    175a:	21 05       	cpc	r18, r1
    175c:	19 f1       	breq	.+70     	; 0x17a4 <pow+0x80>
    175e:	e8 94       	clt
    1760:	08 94       	sec
    1762:	e7 95       	ror	r30
    1764:	d9 01       	movw	r26, r18
    1766:	aa 23       	and	r26, r26
    1768:	29 f4       	brne	.+10     	; 0x1774 <pow+0x50>
    176a:	ab 2f       	mov	r26, r27
    176c:	be 2f       	mov	r27, r30
    176e:	f8 5f       	subi	r31, 0xF8	; 248
    1770:	d0 f3       	brcs	.-12     	; 0x1766 <pow+0x42>
    1772:	10 c0       	rjmp	.+32     	; 0x1794 <pow+0x70>
    1774:	ff 5f       	subi	r31, 0xFF	; 255
    1776:	70 f4       	brcc	.+28     	; 0x1794 <pow+0x70>
    1778:	a6 95       	lsr	r26
    177a:	e0 f7       	brcc	.-8      	; 0x1774 <pow+0x50>
    177c:	f7 39       	cpi	r31, 0x97	; 151
    177e:	50 f0       	brcs	.+20     	; 0x1794 <pow+0x70>
    1780:	19 f0       	breq	.+6      	; 0x1788 <pow+0x64>
    1782:	ff 3a       	cpi	r31, 0xAF	; 175
    1784:	38 f4       	brcc	.+14     	; 0x1794 <pow+0x70>
    1786:	9f 77       	andi	r25, 0x7F	; 127
    1788:	9f 93       	push	r25
    178a:	0d d0       	rcall	.+26     	; 0x17a6 <pow+0x82>
    178c:	0f 90       	pop	r0
    178e:	07 fc       	sbrc	r0, 7
    1790:	90 58       	subi	r25, 0x80	; 128
    1792:	08 95       	ret
    1794:	46 f0       	brts	.+16     	; 0x17a6 <pow+0x82>
    1796:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 e8       	ldi	r24, 0x80	; 128
    17a0:	9f e3       	ldi	r25, 0x3F	; 63
    17a2:	08 95       	ret
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	9f 77       	andi	r25, 0x7F	; 127
    17a8:	5f 93       	push	r21
    17aa:	4f 93       	push	r20
    17ac:	3f 93       	push	r19
    17ae:	2f 93       	push	r18
    17b0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <log>
    17b4:	2f 91       	pop	r18
    17b6:	3f 91       	pop	r19
    17b8:	4f 91       	pop	r20
    17ba:	5f 91       	pop	r21
    17bc:	0e 94 25 0b 	call	0x164a	; 0x164a <__mulsf3>
    17c0:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <exp>

000017c4 <round>:
    17c4:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_splitA>
    17c8:	e8 f0       	brcs	.+58     	; 0x1804 <round+0x40>
    17ca:	9e 37       	cpi	r25, 0x7E	; 126
    17cc:	e8 f0       	brcs	.+58     	; 0x1808 <round+0x44>
    17ce:	96 39       	cpi	r25, 0x96	; 150
    17d0:	b8 f4       	brcc	.+46     	; 0x1800 <round+0x3c>
    17d2:	9e 38       	cpi	r25, 0x8E	; 142
    17d4:	48 f4       	brcc	.+18     	; 0x17e8 <round+0x24>
    17d6:	67 2f       	mov	r22, r23
    17d8:	78 2f       	mov	r23, r24
    17da:	88 27       	eor	r24, r24
    17dc:	98 5f       	subi	r25, 0xF8	; 248
    17de:	f9 cf       	rjmp	.-14     	; 0x17d2 <round+0xe>
    17e0:	86 95       	lsr	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	93 95       	inc	r25
    17e8:	95 39       	cpi	r25, 0x95	; 149
    17ea:	d0 f3       	brcs	.-12     	; 0x17e0 <round+0x1c>
    17ec:	b6 2f       	mov	r27, r22
    17ee:	b1 70       	andi	r27, 0x01	; 1
    17f0:	6b 0f       	add	r22, r27
    17f2:	71 1d       	adc	r23, r1
    17f4:	81 1d       	adc	r24, r1
    17f6:	20 f4       	brcc	.+8      	; 0x1800 <round+0x3c>
    17f8:	87 95       	ror	r24
    17fa:	77 95       	ror	r23
    17fc:	67 95       	ror	r22
    17fe:	93 95       	inc	r25
    1800:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__fp_mintl>
    1804:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_mpack>
    1808:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>
    180c:	29 f4       	brne	.+10     	; 0x1818 <round+0x54>
    180e:	16 f0       	brts	.+4      	; 0x1814 <round+0x50>
    1810:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    1814:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_zero>
    1818:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>

0000181c <exp>:
    181c:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_splitA>
    1820:	a8 f3       	brcs	.-22     	; 0x180c <round+0x48>
    1822:	96 38       	cpi	r25, 0x86	; 134
    1824:	a0 f7       	brcc	.-24     	; 0x180e <round+0x4a>
    1826:	07 f8       	bld	r0, 7
    1828:	0f 92       	push	r0
    182a:	e8 94       	clt
    182c:	2b e3       	ldi	r18, 0x3B	; 59
    182e:	3a ea       	ldi	r19, 0xAA	; 170
    1830:	48 eb       	ldi	r20, 0xB8	; 184
    1832:	5f e7       	ldi	r21, 0x7F	; 127
    1834:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsf3_pse>
    1838:	0f 92       	push	r0
    183a:	0f 92       	push	r0
    183c:	0f 92       	push	r0
    183e:	4d b7       	in	r20, 0x3d	; 61
    1840:	5e b7       	in	r21, 0x3e	; 62
    1842:	0f 92       	push	r0
    1844:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <modf>
    1848:	ec ef       	ldi	r30, 0xFC	; 252
    184a:	f1 e0       	ldi	r31, 0x01	; 1
    184c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fp_powser>
    1850:	4f 91       	pop	r20
    1852:	5f 91       	pop	r21
    1854:	ef 91       	pop	r30
    1856:	ff 91       	pop	r31
    1858:	e5 95       	asr	r30
    185a:	ee 1f       	adc	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	49 f0       	breq	.+18     	; 0x1872 <exp+0x56>
    1860:	fe 57       	subi	r31, 0x7E	; 126
    1862:	e0 68       	ori	r30, 0x80	; 128
    1864:	44 27       	eor	r20, r20
    1866:	ee 0f       	add	r30, r30
    1868:	44 1f       	adc	r20, r20
    186a:	fa 95       	dec	r31
    186c:	e1 f7       	brne	.-8      	; 0x1866 <exp+0x4a>
    186e:	41 95       	neg	r20
    1870:	55 0b       	sbc	r21, r21
    1872:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ldexp>
    1876:	0f 90       	pop	r0
    1878:	07 fe       	sbrs	r0, 7
    187a:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <inverse>
    187e:	08 95       	ret

00001880 <__fp_mintl>:
    1880:	88 23       	and	r24, r24
    1882:	71 f4       	brne	.+28     	; 0x18a0 <__fp_mintl+0x20>
    1884:	77 23       	and	r23, r23
    1886:	21 f0       	breq	.+8      	; 0x1890 <__fp_mintl+0x10>
    1888:	98 50       	subi	r25, 0x08	; 8
    188a:	87 2b       	or	r24, r23
    188c:	76 2f       	mov	r23, r22
    188e:	07 c0       	rjmp	.+14     	; 0x189e <__fp_mintl+0x1e>
    1890:	66 23       	and	r22, r22
    1892:	11 f4       	brne	.+4      	; 0x1898 <__fp_mintl+0x18>
    1894:	99 27       	eor	r25, r25
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <__fp_mintl+0x32>
    1898:	90 51       	subi	r25, 0x10	; 16
    189a:	86 2b       	or	r24, r22
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	2a f0       	brmi	.+10     	; 0x18ac <__fp_mintl+0x2c>
    18a2:	9a 95       	dec	r25
    18a4:	66 0f       	add	r22, r22
    18a6:	77 1f       	adc	r23, r23
    18a8:	88 1f       	adc	r24, r24
    18aa:	da f7       	brpl	.-10     	; 0x18a2 <__fp_mintl+0x22>
    18ac:	88 0f       	add	r24, r24
    18ae:	96 95       	lsr	r25
    18b0:	87 95       	ror	r24
    18b2:	97 f9       	bld	r25, 7
    18b4:	08 95       	ret

000018b6 <__fp_mpack>:
    18b6:	9f 3f       	cpi	r25, 0xFF	; 255
    18b8:	31 f0       	breq	.+12     	; 0x18c6 <__fp_mpack_finite+0xc>

000018ba <__fp_mpack_finite>:
    18ba:	91 50       	subi	r25, 0x01	; 1
    18bc:	20 f4       	brcc	.+8      	; 0x18c6 <__fp_mpack_finite+0xc>
    18be:	87 95       	ror	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b7 95       	ror	r27
    18c6:	88 0f       	add	r24, r24
    18c8:	91 1d       	adc	r25, r1
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	97 f9       	bld	r25, 7
    18d0:	08 95       	ret

000018d2 <__fp_powser>:
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	1f 93       	push	r17
    18d8:	0f 93       	push	r16
    18da:	ff 92       	push	r15
    18dc:	ef 92       	push	r14
    18de:	df 92       	push	r13
    18e0:	7b 01       	movw	r14, r22
    18e2:	8c 01       	movw	r16, r24
    18e4:	68 94       	set
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <__fp_powser+0x22>
    18e8:	da 2e       	mov	r13, r26
    18ea:	ef 01       	movw	r28, r30
    18ec:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3x>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e8 94       	clt
    18f4:	a5 91       	lpm	r26, Z+
    18f6:	25 91       	lpm	r18, Z+
    18f8:	35 91       	lpm	r19, Z+
    18fa:	45 91       	lpm	r20, Z+
    18fc:	55 91       	lpm	r21, Z+
    18fe:	a6 f3       	brts	.-24     	; 0x18e8 <__fp_powser+0x16>
    1900:	ef 01       	movw	r28, r30
    1902:	0e 94 a1 09 	call	0x1342	; 0x1342 <__addsf3x>
    1906:	fe 01       	movw	r30, r28
    1908:	97 01       	movw	r18, r14
    190a:	a8 01       	movw	r20, r16
    190c:	da 94       	dec	r13
    190e:	69 f7       	brne	.-38     	; 0x18ea <__fp_powser+0x18>
    1910:	df 90       	pop	r13
    1912:	ef 90       	pop	r14
    1914:	ff 90       	pop	r15
    1916:	0f 91       	pop	r16
    1918:	1f 91       	pop	r17
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <inverse>:
    1920:	9b 01       	movw	r18, r22
    1922:	ac 01       	movw	r20, r24
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	80 e8       	ldi	r24, 0x80	; 128
    192a:	9f e3       	ldi	r25, 0x3F	; 63
    192c:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__divsf3>
    1930:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>
    1934:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_mpack>

00001938 <ldexp>:
    1938:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_splitA>
    193c:	d8 f3       	brcs	.-10     	; 0x1934 <inverse+0x14>
    193e:	99 23       	and	r25, r25
    1940:	c9 f3       	breq	.-14     	; 0x1934 <inverse+0x14>
    1942:	94 0f       	add	r25, r20
    1944:	51 1d       	adc	r21, r1
    1946:	a3 f3       	brvs	.-24     	; 0x1930 <inverse+0x10>
    1948:	91 50       	subi	r25, 0x01	; 1
    194a:	50 40       	sbci	r21, 0x00	; 0
    194c:	94 f0       	brlt	.+36     	; 0x1972 <ldexp+0x3a>
    194e:	59 f0       	breq	.+22     	; 0x1966 <ldexp+0x2e>
    1950:	88 23       	and	r24, r24
    1952:	32 f0       	brmi	.+12     	; 0x1960 <ldexp+0x28>
    1954:	66 0f       	add	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	91 50       	subi	r25, 0x01	; 1
    195c:	50 40       	sbci	r21, 0x00	; 0
    195e:	c1 f7       	brne	.-16     	; 0x1950 <ldexp+0x18>
    1960:	9e 3f       	cpi	r25, 0xFE	; 254
    1962:	51 05       	cpc	r21, r1
    1964:	2c f7       	brge	.-54     	; 0x1930 <inverse+0x10>
    1966:	88 0f       	add	r24, r24
    1968:	91 1d       	adc	r25, r1
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	97 f9       	bld	r25, 7
    1970:	08 95       	ret
    1972:	5f 3f       	cpi	r21, 0xFF	; 255
    1974:	ac f0       	brlt	.+42     	; 0x19a0 <ldexp+0x68>
    1976:	98 3e       	cpi	r25, 0xE8	; 232
    1978:	9c f0       	brlt	.+38     	; 0x19a0 <ldexp+0x68>
    197a:	bb 27       	eor	r27, r27
    197c:	86 95       	lsr	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	b7 95       	ror	r27
    1984:	08 f4       	brcc	.+2      	; 0x1988 <ldexp+0x50>
    1986:	b1 60       	ori	r27, 0x01	; 1
    1988:	93 95       	inc	r25
    198a:	c1 f7       	brne	.-16     	; 0x197c <ldexp+0x44>
    198c:	bb 0f       	add	r27, r27
    198e:	58 f7       	brcc	.-42     	; 0x1966 <ldexp+0x2e>
    1990:	11 f4       	brne	.+4      	; 0x1996 <ldexp+0x5e>
    1992:	60 ff       	sbrs	r22, 0
    1994:	e8 cf       	rjmp	.-48     	; 0x1966 <ldexp+0x2e>
    1996:	6f 5f       	subi	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	e3 cf       	rjmp	.-58     	; 0x1966 <ldexp+0x2e>
    19a0:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_szero>
    19a4:	16 f0       	brts	.+4      	; 0x19aa <ldexp+0x72>
    19a6:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__fp_mpack>
    19aa:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__fp_nan>
    19ae:	68 94       	set
    19b0:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_inf>

000019b4 <log>:
    19b4:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fp_splitA>
    19b8:	a8 f3       	brcs	.-22     	; 0x19a4 <ldexp+0x6c>
    19ba:	99 23       	and	r25, r25
    19bc:	c1 f3       	breq	.-16     	; 0x19ae <ldexp+0x76>
    19be:	ae f3       	brts	.-22     	; 0x19aa <ldexp+0x72>
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	1f 93       	push	r17
    19c6:	0f 93       	push	r16
    19c8:	ff 92       	push	r15
    19ca:	c9 2f       	mov	r28, r25
    19cc:	dd 27       	eor	r29, r29
    19ce:	88 23       	and	r24, r24
    19d0:	2a f0       	brmi	.+10     	; 0x19dc <log+0x28>
    19d2:	21 97       	sbiw	r28, 0x01	; 1
    19d4:	66 0f       	add	r22, r22
    19d6:	77 1f       	adc	r23, r23
    19d8:	88 1f       	adc	r24, r24
    19da:	da f7       	brpl	.-10     	; 0x19d2 <log+0x1e>
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f eb       	ldi	r21, 0xBF	; 191
    19e4:	9f e3       	ldi	r25, 0x3F	; 63
    19e6:	88 39       	cpi	r24, 0x98	; 152
    19e8:	20 f0       	brcs	.+8      	; 0x19f2 <log+0x3e>
    19ea:	80 3e       	cpi	r24, 0xE0	; 224
    19ec:	38 f0       	brcs	.+14     	; 0x19fc <log+0x48>
    19ee:	21 96       	adiw	r28, 0x01	; 1
    19f0:	8f 77       	andi	r24, 0x7F	; 127
    19f2:	0e 94 8a 09 	call	0x1314	; 0x1314 <__addsf3>
    19f6:	e4 e2       	ldi	r30, 0x24	; 36
    19f8:	f2 e0       	ldi	r31, 0x02	; 2
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <log+0x50>
    19fc:	0e 94 8a 09 	call	0x1314	; 0x1314 <__addsf3>
    1a00:	e1 e5       	ldi	r30, 0x51	; 81
    1a02:	f2 e0       	ldi	r31, 0x02	; 2
    1a04:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__fp_powser>
    1a08:	8b 01       	movw	r16, r22
    1a0a:	be 01       	movw	r22, r28
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	fb 2e       	mov	r15, r27
    1a10:	6f 57       	subi	r22, 0x7F	; 127
    1a12:	71 09       	sbc	r23, r1
    1a14:	75 95       	asr	r23
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 0b       	sbc	r24, r24
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	0e 94 99 0a 	call	0x1532	; 0x1532 <__floatsisf>
    1a20:	28 e1       	ldi	r18, 0x18	; 24
    1a22:	32 e7       	ldi	r19, 0x72	; 114
    1a24:	41 e3       	ldi	r20, 0x31	; 49
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 38 0b 	call	0x1670	; 0x1670 <__mulsf3x>
    1a2c:	af 2d       	mov	r26, r15
    1a2e:	98 01       	movw	r18, r16
    1a30:	ae 01       	movw	r20, r28
    1a32:	ff 90       	pop	r15
    1a34:	0f 91       	pop	r16
    1a36:	1f 91       	pop	r17
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	0e 94 a1 09 	call	0x1342	; 0x1342 <__addsf3x>
    1a40:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__fp_round>

00001a44 <modf>:
    1a44:	fa 01       	movw	r30, r20
    1a46:	dc 01       	movw	r26, r24
    1a48:	aa 0f       	add	r26, r26
    1a4a:	bb 1f       	adc	r27, r27
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	bf 57       	subi	r27, 0x7F	; 127
    1a52:	28 f4       	brcc	.+10     	; 0x1a5e <modf+0x1a>
    1a54:	22 27       	eor	r18, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	44 27       	eor	r20, r20
    1a5a:	50 78       	andi	r21, 0x80	; 128
    1a5c:	20 c0       	rjmp	.+64     	; 0x1a9e <modf+0x5a>
    1a5e:	b7 51       	subi	r27, 0x17	; 23
    1a60:	90 f4       	brcc	.+36     	; 0x1a86 <modf+0x42>
    1a62:	ab 2f       	mov	r26, r27
    1a64:	00 24       	eor	r0, r0
    1a66:	46 95       	lsr	r20
    1a68:	37 95       	ror	r19
    1a6a:	27 95       	ror	r18
    1a6c:	01 1c       	adc	r0, r1
    1a6e:	a3 95       	inc	r26
    1a70:	d2 f3       	brmi	.-12     	; 0x1a66 <modf+0x22>
    1a72:	00 20       	and	r0, r0
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <modf+0x4e>
    1a76:	22 0f       	add	r18, r18
    1a78:	33 1f       	adc	r19, r19
    1a7a:	44 1f       	adc	r20, r20
    1a7c:	b3 95       	inc	r27
    1a7e:	da f3       	brmi	.-10     	; 0x1a76 <modf+0x32>
    1a80:	0e d0       	rcall	.+28     	; 0x1a9e <modf+0x5a>
    1a82:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__subsf3>
    1a86:	61 30       	cpi	r22, 0x01	; 1
    1a88:	71 05       	cpc	r23, r1
    1a8a:	a0 e8       	ldi	r26, 0x80	; 128
    1a8c:	8a 07       	cpc	r24, r26
    1a8e:	b9 46       	sbci	r27, 0x69	; 105
    1a90:	30 f4       	brcc	.+12     	; 0x1a9e <modf+0x5a>
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	66 27       	eor	r22, r22
    1a98:	77 27       	eor	r23, r23
    1a9a:	88 27       	eor	r24, r24
    1a9c:	90 78       	andi	r25, 0x80	; 128
    1a9e:	30 96       	adiw	r30, 0x00	; 0
    1aa0:	21 f0       	breq	.+8      	; 0x1aaa <modf+0x66>
    1aa2:	20 83       	st	Z, r18
    1aa4:	31 83       	std	Z+1, r19	; 0x01
    1aa6:	42 83       	std	Z+2, r20	; 0x02
    1aa8:	53 83       	std	Z+3, r21	; 0x03
    1aaa:	08 95       	ret

00001aac <vfprintf>:
    1aac:	2f 92       	push	r2
    1aae:	3f 92       	push	r3
    1ab0:	4f 92       	push	r4
    1ab2:	5f 92       	push	r5
    1ab4:	6f 92       	push	r6
    1ab6:	7f 92       	push	r7
    1ab8:	8f 92       	push	r8
    1aba:	9f 92       	push	r9
    1abc:	af 92       	push	r10
    1abe:	bf 92       	push	r11
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	60 97       	sbiw	r28, 0x10	; 16
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	de bf       	out	0x3e, r29	; 62
    1ada:	7c 01       	movw	r14, r24
    1adc:	1b 01       	movw	r2, r22
    1ade:	6a 01       	movw	r12, r20
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	16 82       	std	Z+6, r1	; 0x06
    1ae4:	17 82       	std	Z+7, r1	; 0x07
    1ae6:	83 81       	ldd	r24, Z+3	; 0x03
    1ae8:	81 ff       	sbrs	r24, 1
    1aea:	44 c3       	rjmp	.+1672   	; 0x2174 <vfprintf+0x6c8>
    1aec:	9e 01       	movw	r18, r28
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	39 01       	movw	r6, r18
    1af4:	f7 01       	movw	r30, r14
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	f1 01       	movw	r30, r2
    1afa:	93 fd       	sbrc	r25, 3
    1afc:	85 91       	lpm	r24, Z+
    1afe:	93 ff       	sbrs	r25, 3
    1b00:	81 91       	ld	r24, Z+
    1b02:	1f 01       	movw	r2, r30
    1b04:	88 23       	and	r24, r24
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <vfprintf+0x5e>
    1b08:	31 c3       	rjmp	.+1634   	; 0x216c <vfprintf+0x6c0>
    1b0a:	85 32       	cpi	r24, 0x25	; 37
    1b0c:	39 f4       	brne	.+14     	; 0x1b1c <vfprintf+0x70>
    1b0e:	93 fd       	sbrc	r25, 3
    1b10:	85 91       	lpm	r24, Z+
    1b12:	93 ff       	sbrs	r25, 3
    1b14:	81 91       	ld	r24, Z+
    1b16:	1f 01       	movw	r2, r30
    1b18:	85 32       	cpi	r24, 0x25	; 37
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <vfprintf+0x7e>
    1b1c:	b7 01       	movw	r22, r14
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1b24:	56 01       	movw	r10, r12
    1b26:	65 01       	movw	r12, r10
    1b28:	e5 cf       	rjmp	.-54     	; 0x1af4 <vfprintf+0x48>
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	51 2c       	mov	r5, r1
    1b2e:	91 2c       	mov	r9, r1
    1b30:	ff e1       	ldi	r31, 0x1F	; 31
    1b32:	f9 15       	cp	r31, r9
    1b34:	d8 f0       	brcs	.+54     	; 0x1b6c <vfprintf+0xc0>
    1b36:	8b 32       	cpi	r24, 0x2B	; 43
    1b38:	79 f0       	breq	.+30     	; 0x1b58 <vfprintf+0xac>
    1b3a:	38 f4       	brcc	.+14     	; 0x1b4a <vfprintf+0x9e>
    1b3c:	80 32       	cpi	r24, 0x20	; 32
    1b3e:	79 f0       	breq	.+30     	; 0x1b5e <vfprintf+0xb2>
    1b40:	83 32       	cpi	r24, 0x23	; 35
    1b42:	a1 f4       	brne	.+40     	; 0x1b6c <vfprintf+0xc0>
    1b44:	f9 2d       	mov	r31, r9
    1b46:	f0 61       	ori	r31, 0x10	; 16
    1b48:	2e c0       	rjmp	.+92     	; 0x1ba6 <vfprintf+0xfa>
    1b4a:	8d 32       	cpi	r24, 0x2D	; 45
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <vfprintf+0xba>
    1b4e:	80 33       	cpi	r24, 0x30	; 48
    1b50:	69 f4       	brne	.+26     	; 0x1b6c <vfprintf+0xc0>
    1b52:	29 2d       	mov	r18, r9
    1b54:	21 60       	ori	r18, 0x01	; 1
    1b56:	2d c0       	rjmp	.+90     	; 0x1bb2 <vfprintf+0x106>
    1b58:	39 2d       	mov	r19, r9
    1b5a:	32 60       	ori	r19, 0x02	; 2
    1b5c:	93 2e       	mov	r9, r19
    1b5e:	89 2d       	mov	r24, r9
    1b60:	84 60       	ori	r24, 0x04	; 4
    1b62:	98 2e       	mov	r9, r24
    1b64:	2a c0       	rjmp	.+84     	; 0x1bba <vfprintf+0x10e>
    1b66:	e9 2d       	mov	r30, r9
    1b68:	e8 60       	ori	r30, 0x08	; 8
    1b6a:	15 c0       	rjmp	.+42     	; 0x1b96 <vfprintf+0xea>
    1b6c:	97 fc       	sbrc	r9, 7
    1b6e:	2d c0       	rjmp	.+90     	; 0x1bca <vfprintf+0x11e>
    1b70:	20 ed       	ldi	r18, 0xD0	; 208
    1b72:	28 0f       	add	r18, r24
    1b74:	2a 30       	cpi	r18, 0x0A	; 10
    1b76:	88 f4       	brcc	.+34     	; 0x1b9a <vfprintf+0xee>
    1b78:	96 fe       	sbrs	r9, 6
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <vfprintf+0xdc>
    1b7c:	3a e0       	ldi	r19, 0x0A	; 10
    1b7e:	13 9f       	mul	r17, r19
    1b80:	20 0d       	add	r18, r0
    1b82:	11 24       	eor	r1, r1
    1b84:	12 2f       	mov	r17, r18
    1b86:	19 c0       	rjmp	.+50     	; 0x1bba <vfprintf+0x10e>
    1b88:	8a e0       	ldi	r24, 0x0A	; 10
    1b8a:	58 9e       	mul	r5, r24
    1b8c:	20 0d       	add	r18, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	52 2e       	mov	r5, r18
    1b92:	e9 2d       	mov	r30, r9
    1b94:	e0 62       	ori	r30, 0x20	; 32
    1b96:	9e 2e       	mov	r9, r30
    1b98:	10 c0       	rjmp	.+32     	; 0x1bba <vfprintf+0x10e>
    1b9a:	8e 32       	cpi	r24, 0x2E	; 46
    1b9c:	31 f4       	brne	.+12     	; 0x1baa <vfprintf+0xfe>
    1b9e:	96 fc       	sbrc	r9, 6
    1ba0:	e5 c2       	rjmp	.+1482   	; 0x216c <vfprintf+0x6c0>
    1ba2:	f9 2d       	mov	r31, r9
    1ba4:	f0 64       	ori	r31, 0x40	; 64
    1ba6:	9f 2e       	mov	r9, r31
    1ba8:	08 c0       	rjmp	.+16     	; 0x1bba <vfprintf+0x10e>
    1baa:	8c 36       	cpi	r24, 0x6C	; 108
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <vfprintf+0x10a>
    1bae:	29 2d       	mov	r18, r9
    1bb0:	20 68       	ori	r18, 0x80	; 128
    1bb2:	92 2e       	mov	r9, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <vfprintf+0x10e>
    1bb6:	88 36       	cpi	r24, 0x68	; 104
    1bb8:	41 f4       	brne	.+16     	; 0x1bca <vfprintf+0x11e>
    1bba:	f1 01       	movw	r30, r2
    1bbc:	93 fd       	sbrc	r25, 3
    1bbe:	85 91       	lpm	r24, Z+
    1bc0:	93 ff       	sbrs	r25, 3
    1bc2:	81 91       	ld	r24, Z+
    1bc4:	1f 01       	movw	r2, r30
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	b3 cf       	rjmp	.-154    	; 0x1b30 <vfprintf+0x84>
    1bca:	9b eb       	ldi	r25, 0xBB	; 187
    1bcc:	98 0f       	add	r25, r24
    1bce:	93 30       	cpi	r25, 0x03	; 3
    1bd0:	20 f4       	brcc	.+8      	; 0x1bda <vfprintf+0x12e>
    1bd2:	99 2d       	mov	r25, r9
    1bd4:	90 61       	ori	r25, 0x10	; 16
    1bd6:	80 5e       	subi	r24, 0xE0	; 224
    1bd8:	07 c0       	rjmp	.+14     	; 0x1be8 <vfprintf+0x13c>
    1bda:	9b e9       	ldi	r25, 0x9B	; 155
    1bdc:	98 0f       	add	r25, r24
    1bde:	93 30       	cpi	r25, 0x03	; 3
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <vfprintf+0x138>
    1be2:	66 c1       	rjmp	.+716    	; 0x1eb0 <vfprintf+0x404>
    1be4:	99 2d       	mov	r25, r9
    1be6:	9f 7e       	andi	r25, 0xEF	; 239
    1be8:	96 ff       	sbrs	r25, 6
    1bea:	16 e0       	ldi	r17, 0x06	; 6
    1bec:	9f 73       	andi	r25, 0x3F	; 63
    1bee:	99 2e       	mov	r9, r25
    1bf0:	85 36       	cpi	r24, 0x65	; 101
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <vfprintf+0x14e>
    1bf4:	90 64       	ori	r25, 0x40	; 64
    1bf6:	99 2e       	mov	r9, r25
    1bf8:	08 c0       	rjmp	.+16     	; 0x1c0a <vfprintf+0x15e>
    1bfa:	86 36       	cpi	r24, 0x66	; 102
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <vfprintf+0x15a>
    1bfe:	39 2f       	mov	r19, r25
    1c00:	30 68       	ori	r19, 0x80	; 128
    1c02:	93 2e       	mov	r9, r19
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <vfprintf+0x15e>
    1c06:	11 11       	cpse	r17, r1
    1c08:	11 50       	subi	r17, 0x01	; 1
    1c0a:	97 fe       	sbrs	r9, 7
    1c0c:	07 c0       	rjmp	.+14     	; 0x1c1c <vfprintf+0x170>
    1c0e:	1c 33       	cpi	r17, 0x3C	; 60
    1c10:	50 f4       	brcc	.+20     	; 0x1c26 <vfprintf+0x17a>
    1c12:	44 24       	eor	r4, r4
    1c14:	43 94       	inc	r4
    1c16:	41 0e       	add	r4, r17
    1c18:	27 e0       	ldi	r18, 0x07	; 7
    1c1a:	0b c0       	rjmp	.+22     	; 0x1c32 <vfprintf+0x186>
    1c1c:	18 30       	cpi	r17, 0x08	; 8
    1c1e:	38 f0       	brcs	.+14     	; 0x1c2e <vfprintf+0x182>
    1c20:	27 e0       	ldi	r18, 0x07	; 7
    1c22:	17 e0       	ldi	r17, 0x07	; 7
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <vfprintf+0x184>
    1c26:	27 e0       	ldi	r18, 0x07	; 7
    1c28:	9c e3       	ldi	r25, 0x3C	; 60
    1c2a:	49 2e       	mov	r4, r25
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x186>
    1c2e:	21 2f       	mov	r18, r17
    1c30:	41 2c       	mov	r4, r1
    1c32:	56 01       	movw	r10, r12
    1c34:	84 e0       	ldi	r24, 0x04	; 4
    1c36:	a8 0e       	add	r10, r24
    1c38:	b1 1c       	adc	r11, r1
    1c3a:	f6 01       	movw	r30, r12
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	82 81       	ldd	r24, Z+2	; 0x02
    1c42:	93 81       	ldd	r25, Z+3	; 0x03
    1c44:	04 2d       	mov	r16, r4
    1c46:	a3 01       	movw	r20, r6
    1c48:	0e 94 05 11 	call	0x220a	; 0x220a <__ftoa_engine>
    1c4c:	6c 01       	movw	r12, r24
    1c4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c50:	fc 87       	std	Y+12, r31	; 0x0c
    1c52:	f0 ff       	sbrs	r31, 0
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0x1ae>
    1c56:	f3 ff       	sbrs	r31, 3
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <vfprintf+0x1ba>
    1c5a:	91 fc       	sbrc	r9, 1
    1c5c:	06 c0       	rjmp	.+12     	; 0x1c6a <vfprintf+0x1be>
    1c5e:	92 fe       	sbrs	r9, 2
    1c60:	06 c0       	rjmp	.+12     	; 0x1c6e <vfprintf+0x1c2>
    1c62:	00 e2       	ldi	r16, 0x20	; 32
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <vfprintf+0x1c4>
    1c66:	0d e2       	ldi	r16, 0x2D	; 45
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x1c4>
    1c6a:	0b e2       	ldi	r16, 0x2B	; 43
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <vfprintf+0x1c4>
    1c6e:	00 e0       	ldi	r16, 0x00	; 0
    1c70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c72:	8c 70       	andi	r24, 0x0C	; 12
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <vfprintf+0x1d0>
    1c76:	01 11       	cpse	r16, r1
    1c78:	5a c2       	rjmp	.+1204   	; 0x212e <vfprintf+0x682>
    1c7a:	9b c2       	rjmp	.+1334   	; 0x21b2 <vfprintf+0x706>
    1c7c:	97 fe       	sbrs	r9, 7
    1c7e:	10 c0       	rjmp	.+32     	; 0x1ca0 <vfprintf+0x1f4>
    1c80:	4c 0c       	add	r4, r12
    1c82:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c84:	f4 ff       	sbrs	r31, 4
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <vfprintf+0x1e4>
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	81 33       	cpi	r24, 0x31	; 49
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <vfprintf+0x1e4>
    1c8e:	4a 94       	dec	r4
    1c90:	14 14       	cp	r1, r4
    1c92:	74 f5       	brge	.+92     	; 0x1cf0 <vfprintf+0x244>
    1c94:	28 e0       	ldi	r18, 0x08	; 8
    1c96:	24 15       	cp	r18, r4
    1c98:	78 f5       	brcc	.+94     	; 0x1cf8 <vfprintf+0x24c>
    1c9a:	88 e0       	ldi	r24, 0x08	; 8
    1c9c:	48 2e       	mov	r4, r24
    1c9e:	2c c0       	rjmp	.+88     	; 0x1cf8 <vfprintf+0x24c>
    1ca0:	96 fc       	sbrc	r9, 6
    1ca2:	2a c0       	rjmp	.+84     	; 0x1cf8 <vfprintf+0x24c>
    1ca4:	81 2f       	mov	r24, r17
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	8c 15       	cp	r24, r12
    1caa:	9d 05       	cpc	r25, r13
    1cac:	9c f0       	brlt	.+38     	; 0x1cd4 <vfprintf+0x228>
    1cae:	3c ef       	ldi	r19, 0xFC	; 252
    1cb0:	c3 16       	cp	r12, r19
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	d3 06       	cpc	r13, r19
    1cb6:	74 f0       	brlt	.+28     	; 0x1cd4 <vfprintf+0x228>
    1cb8:	89 2d       	mov	r24, r9
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	98 2e       	mov	r9, r24
    1cbe:	0a c0       	rjmp	.+20     	; 0x1cd4 <vfprintf+0x228>
    1cc0:	e2 e0       	ldi	r30, 0x02	; 2
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	ec 0f       	add	r30, r28
    1cc6:	fd 1f       	adc	r31, r29
    1cc8:	e1 0f       	add	r30, r17
    1cca:	f1 1d       	adc	r31, r1
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 33       	cpi	r24, 0x30	; 48
    1cd0:	19 f4       	brne	.+6      	; 0x1cd8 <vfprintf+0x22c>
    1cd2:	11 50       	subi	r17, 0x01	; 1
    1cd4:	11 11       	cpse	r17, r1
    1cd6:	f4 cf       	rjmp	.-24     	; 0x1cc0 <vfprintf+0x214>
    1cd8:	97 fe       	sbrs	r9, 7
    1cda:	0e c0       	rjmp	.+28     	; 0x1cf8 <vfprintf+0x24c>
    1cdc:	44 24       	eor	r4, r4
    1cde:	43 94       	inc	r4
    1ce0:	41 0e       	add	r4, r17
    1ce2:	81 2f       	mov	r24, r17
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	c8 16       	cp	r12, r24
    1ce8:	d9 06       	cpc	r13, r25
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <vfprintf+0x24a>
    1cec:	1c 19       	sub	r17, r12
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <vfprintf+0x24c>
    1cf0:	44 24       	eor	r4, r4
    1cf2:	43 94       	inc	r4
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <vfprintf+0x24c>
    1cf6:	10 e0       	ldi	r17, 0x00	; 0
    1cf8:	97 fe       	sbrs	r9, 7
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <vfprintf+0x25c>
    1cfc:	1c 14       	cp	r1, r12
    1cfe:	1d 04       	cpc	r1, r13
    1d00:	34 f4       	brge	.+12     	; 0x1d0e <vfprintf+0x262>
    1d02:	c6 01       	movw	r24, r12
    1d04:	01 96       	adiw	r24, 0x01	; 1
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <vfprintf+0x266>
    1d08:	85 e0       	ldi	r24, 0x05	; 5
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x266>
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	01 11       	cpse	r16, r1
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	11 23       	and	r17, r17
    1d18:	31 f0       	breq	.+12     	; 0x1d26 <vfprintf+0x27a>
    1d1a:	21 2f       	mov	r18, r17
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	2f 5f       	subi	r18, 0xFF	; 255
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	82 0f       	add	r24, r18
    1d24:	93 1f       	adc	r25, r19
    1d26:	25 2d       	mov	r18, r5
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	82 17       	cp	r24, r18
    1d2c:	93 07       	cpc	r25, r19
    1d2e:	14 f4       	brge	.+4      	; 0x1d34 <vfprintf+0x288>
    1d30:	58 1a       	sub	r5, r24
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <vfprintf+0x28a>
    1d34:	51 2c       	mov	r5, r1
    1d36:	89 2d       	mov	r24, r9
    1d38:	89 70       	andi	r24, 0x09	; 9
    1d3a:	49 f4       	brne	.+18     	; 0x1d4e <vfprintf+0x2a2>
    1d3c:	55 20       	and	r5, r5
    1d3e:	39 f0       	breq	.+14     	; 0x1d4e <vfprintf+0x2a2>
    1d40:	b7 01       	movw	r22, r14
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1d4a:	5a 94       	dec	r5
    1d4c:	f7 cf       	rjmp	.-18     	; 0x1d3c <vfprintf+0x290>
    1d4e:	00 23       	and	r16, r16
    1d50:	29 f0       	breq	.+10     	; 0x1d5c <vfprintf+0x2b0>
    1d52:	b7 01       	movw	r22, r14
    1d54:	80 2f       	mov	r24, r16
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1d5c:	93 fc       	sbrc	r9, 3
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <vfprintf+0x2c6>
    1d60:	55 20       	and	r5, r5
    1d62:	39 f0       	breq	.+14     	; 0x1d72 <vfprintf+0x2c6>
    1d64:	b7 01       	movw	r22, r14
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1d6e:	5a 94       	dec	r5
    1d70:	f7 cf       	rjmp	.-18     	; 0x1d60 <vfprintf+0x2b4>
    1d72:	97 fe       	sbrs	r9, 7
    1d74:	4c c0       	rjmp	.+152    	; 0x1e0e <vfprintf+0x362>
    1d76:	46 01       	movw	r8, r12
    1d78:	d7 fe       	sbrs	r13, 7
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vfprintf+0x2d4>
    1d7c:	81 2c       	mov	r8, r1
    1d7e:	91 2c       	mov	r9, r1
    1d80:	c6 01       	movw	r24, r12
    1d82:	88 19       	sub	r24, r8
    1d84:	99 09       	sbc	r25, r9
    1d86:	f3 01       	movw	r30, r6
    1d88:	e8 0f       	add	r30, r24
    1d8a:	f9 1f       	adc	r31, r25
    1d8c:	ed 87       	std	Y+13, r30	; 0x0d
    1d8e:	fe 87       	std	Y+14, r31	; 0x0e
    1d90:	96 01       	movw	r18, r12
    1d92:	24 19       	sub	r18, r4
    1d94:	31 09       	sbc	r19, r1
    1d96:	2f 87       	std	Y+15, r18	; 0x0f
    1d98:	38 8b       	std	Y+16, r19	; 0x10
    1d9a:	01 2f       	mov	r16, r17
    1d9c:	10 e0       	ldi	r17, 0x00	; 0
    1d9e:	11 95       	neg	r17
    1da0:	01 95       	neg	r16
    1da2:	11 09       	sbc	r17, r1
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	83 16       	cp	r8, r19
    1da8:	93 06       	cpc	r9, r19
    1daa:	29 f4       	brne	.+10     	; 0x1db6 <vfprintf+0x30a>
    1dac:	b7 01       	movw	r22, r14
    1dae:	8e e2       	ldi	r24, 0x2E	; 46
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1db6:	c8 14       	cp	r12, r8
    1db8:	d9 04       	cpc	r13, r9
    1dba:	4c f0       	brlt	.+18     	; 0x1dce <vfprintf+0x322>
    1dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbe:	98 89       	ldd	r25, Y+16	; 0x10
    1dc0:	88 15       	cp	r24, r8
    1dc2:	99 05       	cpc	r25, r9
    1dc4:	24 f4       	brge	.+8      	; 0x1dce <vfprintf+0x322>
    1dc6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dc8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dca:	81 81       	ldd	r24, Z+1	; 0x01
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <vfprintf+0x324>
    1dce:	80 e3       	ldi	r24, 0x30	; 48
    1dd0:	f1 e0       	ldi	r31, 0x01	; 1
    1dd2:	8f 1a       	sub	r8, r31
    1dd4:	91 08       	sbc	r9, r1
    1dd6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1dd8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1dda:	2f 5f       	subi	r18, 0xFF	; 255
    1ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dde:	2d 87       	std	Y+13, r18	; 0x0d
    1de0:	3e 87       	std	Y+14, r19	; 0x0e
    1de2:	80 16       	cp	r8, r16
    1de4:	91 06       	cpc	r9, r17
    1de6:	2c f0       	brlt	.+10     	; 0x1df2 <vfprintf+0x346>
    1de8:	b7 01       	movw	r22, r14
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1df0:	d9 cf       	rjmp	.-78     	; 0x1da4 <vfprintf+0x2f8>
    1df2:	c8 14       	cp	r12, r8
    1df4:	d9 04       	cpc	r13, r9
    1df6:	41 f4       	brne	.+16     	; 0x1e08 <vfprintf+0x35c>
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	96 33       	cpi	r25, 0x36	; 54
    1dfc:	20 f4       	brcc	.+8      	; 0x1e06 <vfprintf+0x35a>
    1dfe:	95 33       	cpi	r25, 0x35	; 53
    1e00:	19 f4       	brne	.+6      	; 0x1e08 <vfprintf+0x35c>
    1e02:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e04:	34 ff       	sbrs	r19, 4
    1e06:	81 e3       	ldi	r24, 0x31	; 49
    1e08:	b7 01       	movw	r22, r14
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	4e c0       	rjmp	.+156    	; 0x1eaa <vfprintf+0x3fe>
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	81 33       	cpi	r24, 0x31	; 49
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <vfprintf+0x36e>
    1e14:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e16:	9f 7e       	andi	r25, 0xEF	; 239
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1e22:	11 11       	cpse	r17, r1
    1e24:	05 c0       	rjmp	.+10     	; 0x1e30 <vfprintf+0x384>
    1e26:	94 fc       	sbrc	r9, 4
    1e28:	18 c0       	rjmp	.+48     	; 0x1e5a <vfprintf+0x3ae>
    1e2a:	85 e6       	ldi	r24, 0x65	; 101
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	17 c0       	rjmp	.+46     	; 0x1e5e <vfprintf+0x3b2>
    1e30:	b7 01       	movw	r22, r14
    1e32:	8e e2       	ldi	r24, 0x2E	; 46
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1e3a:	1e 5f       	subi	r17, 0xFE	; 254
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	01 e0       	ldi	r16, 0x01	; 1
    1e40:	08 0f       	add	r16, r24
    1e42:	f3 01       	movw	r30, r6
    1e44:	e8 0f       	add	r30, r24
    1e46:	f1 1d       	adc	r31, r1
    1e48:	80 81       	ld	r24, Z
    1e4a:	b7 01       	movw	r22, r14
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1e52:	80 2f       	mov	r24, r16
    1e54:	01 13       	cpse	r16, r17
    1e56:	f3 cf       	rjmp	.-26     	; 0x1e3e <vfprintf+0x392>
    1e58:	e6 cf       	rjmp	.-52     	; 0x1e26 <vfprintf+0x37a>
    1e5a:	85 e4       	ldi	r24, 0x45	; 69
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	b7 01       	movw	r22, r14
    1e60:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1e64:	d7 fc       	sbrc	r13, 7
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x3c8>
    1e68:	c1 14       	cp	r12, r1
    1e6a:	d1 04       	cpc	r13, r1
    1e6c:	41 f4       	brne	.+16     	; 0x1e7e <vfprintf+0x3d2>
    1e6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e70:	e4 ff       	sbrs	r30, 4
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <vfprintf+0x3d2>
    1e74:	d1 94       	neg	r13
    1e76:	c1 94       	neg	r12
    1e78:	d1 08       	sbc	r13, r1
    1e7a:	8d e2       	ldi	r24, 0x2D	; 45
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <vfprintf+0x3d4>
    1e7e:	8b e2       	ldi	r24, 0x2B	; 43
    1e80:	b7 01       	movw	r22, r14
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1e88:	80 e3       	ldi	r24, 0x30	; 48
    1e8a:	2a e0       	ldi	r18, 0x0A	; 10
    1e8c:	c2 16       	cp	r12, r18
    1e8e:	d1 04       	cpc	r13, r1
    1e90:	2c f0       	brlt	.+10     	; 0x1e9c <vfprintf+0x3f0>
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	fa e0       	ldi	r31, 0x0A	; 10
    1e96:	cf 1a       	sub	r12, r31
    1e98:	d1 08       	sbc	r13, r1
    1e9a:	f7 cf       	rjmp	.-18     	; 0x1e8a <vfprintf+0x3de>
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1ea4:	b7 01       	movw	r22, r14
    1ea6:	c6 01       	movw	r24, r12
    1ea8:	c0 96       	adiw	r24, 0x30	; 48
    1eaa:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1eae:	54 c1       	rjmp	.+680    	; 0x2158 <vfprintf+0x6ac>
    1eb0:	83 36       	cpi	r24, 0x63	; 99
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <vfprintf+0x414>
    1eb4:	83 37       	cpi	r24, 0x73	; 115
    1eb6:	79 f0       	breq	.+30     	; 0x1ed6 <vfprintf+0x42a>
    1eb8:	83 35       	cpi	r24, 0x53	; 83
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <vfprintf+0x412>
    1ebc:	56 c0       	rjmp	.+172    	; 0x1f6a <vfprintf+0x4be>
    1ebe:	20 c0       	rjmp	.+64     	; 0x1f00 <vfprintf+0x454>
    1ec0:	56 01       	movw	r10, r12
    1ec2:	32 e0       	ldi	r19, 0x02	; 2
    1ec4:	a3 0e       	add	r10, r19
    1ec6:	b1 1c       	adc	r11, r1
    1ec8:	f6 01       	movw	r30, r12
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	01 e0       	ldi	r16, 0x01	; 1
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
    1ed2:	63 01       	movw	r12, r6
    1ed4:	12 c0       	rjmp	.+36     	; 0x1efa <vfprintf+0x44e>
    1ed6:	56 01       	movw	r10, r12
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2
    1eda:	af 0e       	add	r10, r31
    1edc:	b1 1c       	adc	r11, r1
    1ede:	f6 01       	movw	r30, r12
    1ee0:	c0 80       	ld	r12, Z
    1ee2:	d1 80       	ldd	r13, Z+1	; 0x01
    1ee4:	96 fe       	sbrs	r9, 6
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <vfprintf+0x442>
    1ee8:	61 2f       	mov	r22, r17
    1eea:	70 e0       	ldi	r23, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <vfprintf+0x446>
    1eee:	6f ef       	ldi	r22, 0xFF	; 255
    1ef0:	7f ef       	ldi	r23, 0xFF	; 255
    1ef2:	c6 01       	movw	r24, r12
    1ef4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <strnlen>
    1ef8:	8c 01       	movw	r16, r24
    1efa:	f9 2d       	mov	r31, r9
    1efc:	ff 77       	andi	r31, 0x7F	; 127
    1efe:	14 c0       	rjmp	.+40     	; 0x1f28 <vfprintf+0x47c>
    1f00:	56 01       	movw	r10, r12
    1f02:	22 e0       	ldi	r18, 0x02	; 2
    1f04:	a2 0e       	add	r10, r18
    1f06:	b1 1c       	adc	r11, r1
    1f08:	f6 01       	movw	r30, r12
    1f0a:	c0 80       	ld	r12, Z
    1f0c:	d1 80       	ldd	r13, Z+1	; 0x01
    1f0e:	96 fe       	sbrs	r9, 6
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <vfprintf+0x46c>
    1f12:	61 2f       	mov	r22, r17
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <vfprintf+0x470>
    1f18:	6f ef       	ldi	r22, 0xFF	; 255
    1f1a:	7f ef       	ldi	r23, 0xFF	; 255
    1f1c:	c6 01       	movw	r24, r12
    1f1e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <strnlen_P>
    1f22:	8c 01       	movw	r16, r24
    1f24:	f9 2d       	mov	r31, r9
    1f26:	f0 68       	ori	r31, 0x80	; 128
    1f28:	9f 2e       	mov	r9, r31
    1f2a:	f3 fd       	sbrc	r31, 3
    1f2c:	1a c0       	rjmp	.+52     	; 0x1f62 <vfprintf+0x4b6>
    1f2e:	85 2d       	mov	r24, r5
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	08 17       	cp	r16, r24
    1f34:	19 07       	cpc	r17, r25
    1f36:	a8 f4       	brcc	.+42     	; 0x1f62 <vfprintf+0x4b6>
    1f38:	b7 01       	movw	r22, r14
    1f3a:	80 e2       	ldi	r24, 0x20	; 32
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1f42:	5a 94       	dec	r5
    1f44:	f4 cf       	rjmp	.-24     	; 0x1f2e <vfprintf+0x482>
    1f46:	f6 01       	movw	r30, r12
    1f48:	97 fc       	sbrc	r9, 7
    1f4a:	85 91       	lpm	r24, Z+
    1f4c:	97 fe       	sbrs	r9, 7
    1f4e:	81 91       	ld	r24, Z+
    1f50:	6f 01       	movw	r12, r30
    1f52:	b7 01       	movw	r22, r14
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    1f5a:	51 10       	cpse	r5, r1
    1f5c:	5a 94       	dec	r5
    1f5e:	01 50       	subi	r16, 0x01	; 1
    1f60:	11 09       	sbc	r17, r1
    1f62:	01 15       	cp	r16, r1
    1f64:	11 05       	cpc	r17, r1
    1f66:	79 f7       	brne	.-34     	; 0x1f46 <vfprintf+0x49a>
    1f68:	f7 c0       	rjmp	.+494    	; 0x2158 <vfprintf+0x6ac>
    1f6a:	84 36       	cpi	r24, 0x64	; 100
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <vfprintf+0x4c6>
    1f6e:	89 36       	cpi	r24, 0x69	; 105
    1f70:	61 f5       	brne	.+88     	; 0x1fca <vfprintf+0x51e>
    1f72:	56 01       	movw	r10, r12
    1f74:	97 fe       	sbrs	r9, 7
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <vfprintf+0x4de>
    1f78:	24 e0       	ldi	r18, 0x04	; 4
    1f7a:	a2 0e       	add	r10, r18
    1f7c:	b1 1c       	adc	r11, r1
    1f7e:	f6 01       	movw	r30, r12
    1f80:	60 81       	ld	r22, Z
    1f82:	71 81       	ldd	r23, Z+1	; 0x01
    1f84:	82 81       	ldd	r24, Z+2	; 0x02
    1f86:	93 81       	ldd	r25, Z+3	; 0x03
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <vfprintf+0x4f2>
    1f8a:	f2 e0       	ldi	r31, 0x02	; 2
    1f8c:	af 0e       	add	r10, r31
    1f8e:	b1 1c       	adc	r11, r1
    1f90:	f6 01       	movw	r30, r12
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	07 2e       	mov	r0, r23
    1f98:	00 0c       	add	r0, r0
    1f9a:	88 0b       	sbc	r24, r24
    1f9c:	99 0b       	sbc	r25, r25
    1f9e:	f9 2d       	mov	r31, r9
    1fa0:	ff 76       	andi	r31, 0x6F	; 111
    1fa2:	9f 2e       	mov	r9, r31
    1fa4:	97 ff       	sbrs	r25, 7
    1fa6:	09 c0       	rjmp	.+18     	; 0x1fba <vfprintf+0x50e>
    1fa8:	90 95       	com	r25
    1faa:	80 95       	com	r24
    1fac:	70 95       	com	r23
    1fae:	61 95       	neg	r22
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb6:	f0 68       	ori	r31, 0x80	; 128
    1fb8:	9f 2e       	mov	r9, r31
    1fba:	2a e0       	ldi	r18, 0x0A	; 10
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	a3 01       	movw	r20, r6
    1fc0:	0e 94 4c 12 	call	0x2498	; 0x2498 <__ultoa_invert>
    1fc4:	c8 2e       	mov	r12, r24
    1fc6:	c6 18       	sub	r12, r6
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <vfprintf+0x59c>
    1fca:	09 2d       	mov	r16, r9
    1fcc:	85 37       	cpi	r24, 0x75	; 117
    1fce:	21 f4       	brne	.+8      	; 0x1fd8 <vfprintf+0x52c>
    1fd0:	0f 7e       	andi	r16, 0xEF	; 239
    1fd2:	2a e0       	ldi	r18, 0x0A	; 10
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	1d c0       	rjmp	.+58     	; 0x2012 <vfprintf+0x566>
    1fd8:	09 7f       	andi	r16, 0xF9	; 249
    1fda:	8f 36       	cpi	r24, 0x6F	; 111
    1fdc:	91 f0       	breq	.+36     	; 0x2002 <vfprintf+0x556>
    1fde:	18 f4       	brcc	.+6      	; 0x1fe6 <vfprintf+0x53a>
    1fe0:	88 35       	cpi	r24, 0x58	; 88
    1fe2:	59 f0       	breq	.+22     	; 0x1ffa <vfprintf+0x54e>
    1fe4:	c3 c0       	rjmp	.+390    	; 0x216c <vfprintf+0x6c0>
    1fe6:	80 37       	cpi	r24, 0x70	; 112
    1fe8:	19 f0       	breq	.+6      	; 0x1ff0 <vfprintf+0x544>
    1fea:	88 37       	cpi	r24, 0x78	; 120
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <vfprintf+0x546>
    1fee:	be c0       	rjmp	.+380    	; 0x216c <vfprintf+0x6c0>
    1ff0:	00 61       	ori	r16, 0x10	; 16
    1ff2:	04 ff       	sbrs	r16, 4
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <vfprintf+0x55c>
    1ff6:	04 60       	ori	r16, 0x04	; 4
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <vfprintf+0x55c>
    1ffa:	94 fe       	sbrs	r9, 4
    1ffc:	08 c0       	rjmp	.+16     	; 0x200e <vfprintf+0x562>
    1ffe:	06 60       	ori	r16, 0x06	; 6
    2000:	06 c0       	rjmp	.+12     	; 0x200e <vfprintf+0x562>
    2002:	28 e0       	ldi	r18, 0x08	; 8
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <vfprintf+0x566>
    2008:	20 e1       	ldi	r18, 0x10	; 16
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <vfprintf+0x566>
    200e:	20 e1       	ldi	r18, 0x10	; 16
    2010:	32 e0       	ldi	r19, 0x02	; 2
    2012:	56 01       	movw	r10, r12
    2014:	07 ff       	sbrs	r16, 7
    2016:	09 c0       	rjmp	.+18     	; 0x202a <vfprintf+0x57e>
    2018:	84 e0       	ldi	r24, 0x04	; 4
    201a:	a8 0e       	add	r10, r24
    201c:	b1 1c       	adc	r11, r1
    201e:	f6 01       	movw	r30, r12
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	08 c0       	rjmp	.+16     	; 0x203a <vfprintf+0x58e>
    202a:	f2 e0       	ldi	r31, 0x02	; 2
    202c:	af 0e       	add	r10, r31
    202e:	b1 1c       	adc	r11, r1
    2030:	f6 01       	movw	r30, r12
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a3 01       	movw	r20, r6
    203c:	0e 94 4c 12 	call	0x2498	; 0x2498 <__ultoa_invert>
    2040:	c8 2e       	mov	r12, r24
    2042:	c6 18       	sub	r12, r6
    2044:	0f 77       	andi	r16, 0x7F	; 127
    2046:	90 2e       	mov	r9, r16
    2048:	96 fe       	sbrs	r9, 6
    204a:	0b c0       	rjmp	.+22     	; 0x2062 <vfprintf+0x5b6>
    204c:	09 2d       	mov	r16, r9
    204e:	0e 7f       	andi	r16, 0xFE	; 254
    2050:	c1 16       	cp	r12, r17
    2052:	50 f4       	brcc	.+20     	; 0x2068 <vfprintf+0x5bc>
    2054:	94 fe       	sbrs	r9, 4
    2056:	0a c0       	rjmp	.+20     	; 0x206c <vfprintf+0x5c0>
    2058:	92 fc       	sbrc	r9, 2
    205a:	08 c0       	rjmp	.+16     	; 0x206c <vfprintf+0x5c0>
    205c:	09 2d       	mov	r16, r9
    205e:	0e 7e       	andi	r16, 0xEE	; 238
    2060:	05 c0       	rjmp	.+10     	; 0x206c <vfprintf+0x5c0>
    2062:	dc 2c       	mov	r13, r12
    2064:	09 2d       	mov	r16, r9
    2066:	03 c0       	rjmp	.+6      	; 0x206e <vfprintf+0x5c2>
    2068:	dc 2c       	mov	r13, r12
    206a:	01 c0       	rjmp	.+2      	; 0x206e <vfprintf+0x5c2>
    206c:	d1 2e       	mov	r13, r17
    206e:	04 ff       	sbrs	r16, 4
    2070:	0d c0       	rjmp	.+26     	; 0x208c <vfprintf+0x5e0>
    2072:	fe 01       	movw	r30, r28
    2074:	ec 0d       	add	r30, r12
    2076:	f1 1d       	adc	r31, r1
    2078:	80 81       	ld	r24, Z
    207a:	80 33       	cpi	r24, 0x30	; 48
    207c:	11 f4       	brne	.+4      	; 0x2082 <vfprintf+0x5d6>
    207e:	09 7e       	andi	r16, 0xE9	; 233
    2080:	09 c0       	rjmp	.+18     	; 0x2094 <vfprintf+0x5e8>
    2082:	02 ff       	sbrs	r16, 2
    2084:	06 c0       	rjmp	.+12     	; 0x2092 <vfprintf+0x5e6>
    2086:	d3 94       	inc	r13
    2088:	d3 94       	inc	r13
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <vfprintf+0x5e8>
    208c:	80 2f       	mov	r24, r16
    208e:	86 78       	andi	r24, 0x86	; 134
    2090:	09 f0       	breq	.+2      	; 0x2094 <vfprintf+0x5e8>
    2092:	d3 94       	inc	r13
    2094:	03 fd       	sbrc	r16, 3
    2096:	11 c0       	rjmp	.+34     	; 0x20ba <vfprintf+0x60e>
    2098:	00 ff       	sbrs	r16, 0
    209a:	06 c0       	rjmp	.+12     	; 0x20a8 <vfprintf+0x5fc>
    209c:	1c 2d       	mov	r17, r12
    209e:	d5 14       	cp	r13, r5
    20a0:	80 f4       	brcc	.+32     	; 0x20c2 <vfprintf+0x616>
    20a2:	15 0d       	add	r17, r5
    20a4:	1d 19       	sub	r17, r13
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <vfprintf+0x616>
    20a8:	d5 14       	cp	r13, r5
    20aa:	58 f4       	brcc	.+22     	; 0x20c2 <vfprintf+0x616>
    20ac:	b7 01       	movw	r22, r14
    20ae:	80 e2       	ldi	r24, 0x20	; 32
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    20b6:	d3 94       	inc	r13
    20b8:	f7 cf       	rjmp	.-18     	; 0x20a8 <vfprintf+0x5fc>
    20ba:	d5 14       	cp	r13, r5
    20bc:	10 f4       	brcc	.+4      	; 0x20c2 <vfprintf+0x616>
    20be:	5d 18       	sub	r5, r13
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <vfprintf+0x618>
    20c2:	51 2c       	mov	r5, r1
    20c4:	04 ff       	sbrs	r16, 4
    20c6:	10 c0       	rjmp	.+32     	; 0x20e8 <vfprintf+0x63c>
    20c8:	b7 01       	movw	r22, r14
    20ca:	80 e3       	ldi	r24, 0x30	; 48
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    20d2:	02 ff       	sbrs	r16, 2
    20d4:	17 c0       	rjmp	.+46     	; 0x2104 <vfprintf+0x658>
    20d6:	01 fd       	sbrc	r16, 1
    20d8:	03 c0       	rjmp	.+6      	; 0x20e0 <vfprintf+0x634>
    20da:	88 e7       	ldi	r24, 0x78	; 120
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <vfprintf+0x638>
    20e0:	88 e5       	ldi	r24, 0x58	; 88
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	b7 01       	movw	r22, r14
    20e6:	0c c0       	rjmp	.+24     	; 0x2100 <vfprintf+0x654>
    20e8:	80 2f       	mov	r24, r16
    20ea:	86 78       	andi	r24, 0x86	; 134
    20ec:	59 f0       	breq	.+22     	; 0x2104 <vfprintf+0x658>
    20ee:	01 ff       	sbrs	r16, 1
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <vfprintf+0x64a>
    20f2:	8b e2       	ldi	r24, 0x2B	; 43
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <vfprintf+0x64c>
    20f6:	80 e2       	ldi	r24, 0x20	; 32
    20f8:	07 fd       	sbrc	r16, 7
    20fa:	8d e2       	ldi	r24, 0x2D	; 45
    20fc:	b7 01       	movw	r22, r14
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2104:	c1 16       	cp	r12, r17
    2106:	38 f4       	brcc	.+14     	; 0x2116 <vfprintf+0x66a>
    2108:	b7 01       	movw	r22, r14
    210a:	80 e3       	ldi	r24, 0x30	; 48
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2112:	11 50       	subi	r17, 0x01	; 1
    2114:	f7 cf       	rjmp	.-18     	; 0x2104 <vfprintf+0x658>
    2116:	ca 94       	dec	r12
    2118:	f3 01       	movw	r30, r6
    211a:	ec 0d       	add	r30, r12
    211c:	f1 1d       	adc	r31, r1
    211e:	80 81       	ld	r24, Z
    2120:	b7 01       	movw	r22, r14
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2128:	c1 10       	cpse	r12, r1
    212a:	f5 cf       	rjmp	.-22     	; 0x2116 <vfprintf+0x66a>
    212c:	15 c0       	rjmp	.+42     	; 0x2158 <vfprintf+0x6ac>
    212e:	f4 e0       	ldi	r31, 0x04	; 4
    2130:	f5 15       	cp	r31, r5
    2132:	60 f5       	brcc	.+88     	; 0x218c <vfprintf+0x6e0>
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	58 1a       	sub	r5, r24
    2138:	93 fe       	sbrs	r9, 3
    213a:	1f c0       	rjmp	.+62     	; 0x217a <vfprintf+0x6ce>
    213c:	01 11       	cpse	r16, r1
    213e:	27 c0       	rjmp	.+78     	; 0x218e <vfprintf+0x6e2>
    2140:	2c 85       	ldd	r18, Y+12	; 0x0c
    2142:	23 ff       	sbrs	r18, 3
    2144:	2a c0       	rjmp	.+84     	; 0x219a <vfprintf+0x6ee>
    2146:	06 e8       	ldi	r16, 0x86	; 134
    2148:	12 e0       	ldi	r17, 0x02	; 2
    214a:	39 2d       	mov	r19, r9
    214c:	30 71       	andi	r19, 0x10	; 16
    214e:	93 2e       	mov	r9, r19
    2150:	f8 01       	movw	r30, r16
    2152:	84 91       	lpm	r24, Z
    2154:	81 11       	cpse	r24, r1
    2156:	24 c0       	rjmp	.+72     	; 0x21a0 <vfprintf+0x6f4>
    2158:	55 20       	and	r5, r5
    215a:	09 f4       	brne	.+2      	; 0x215e <vfprintf+0x6b2>
    215c:	e4 cc       	rjmp	.-1592   	; 0x1b26 <vfprintf+0x7a>
    215e:	b7 01       	movw	r22, r14
    2160:	80 e2       	ldi	r24, 0x20	; 32
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2168:	5a 94       	dec	r5
    216a:	f6 cf       	rjmp	.-20     	; 0x2158 <vfprintf+0x6ac>
    216c:	f7 01       	movw	r30, r14
    216e:	86 81       	ldd	r24, Z+6	; 0x06
    2170:	97 81       	ldd	r25, Z+7	; 0x07
    2172:	26 c0       	rjmp	.+76     	; 0x21c0 <vfprintf+0x714>
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	9f ef       	ldi	r25, 0xFF	; 255
    2178:	23 c0       	rjmp	.+70     	; 0x21c0 <vfprintf+0x714>
    217a:	b7 01       	movw	r22, r14
    217c:	80 e2       	ldi	r24, 0x20	; 32
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2184:	5a 94       	dec	r5
    2186:	51 10       	cpse	r5, r1
    2188:	f8 cf       	rjmp	.-16     	; 0x217a <vfprintf+0x6ce>
    218a:	d8 cf       	rjmp	.-80     	; 0x213c <vfprintf+0x690>
    218c:	51 2c       	mov	r5, r1
    218e:	b7 01       	movw	r22, r14
    2190:	80 2f       	mov	r24, r16
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    2198:	d3 cf       	rjmp	.-90     	; 0x2140 <vfprintf+0x694>
    219a:	0a e8       	ldi	r16, 0x8A	; 138
    219c:	12 e0       	ldi	r17, 0x02	; 2
    219e:	d5 cf       	rjmp	.-86     	; 0x214a <vfprintf+0x69e>
    21a0:	91 10       	cpse	r9, r1
    21a2:	80 52       	subi	r24, 0x20	; 32
    21a4:	b7 01       	movw	r22, r14
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <fputc>
    21ac:	0f 5f       	subi	r16, 0xFF	; 255
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	cf cf       	rjmp	.-98     	; 0x2150 <vfprintf+0x6a4>
    21b2:	23 e0       	ldi	r18, 0x03	; 3
    21b4:	25 15       	cp	r18, r5
    21b6:	10 f4       	brcc	.+4      	; 0x21bc <vfprintf+0x710>
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	bd cf       	rjmp	.-134    	; 0x2136 <vfprintf+0x68a>
    21bc:	51 2c       	mov	r5, r1
    21be:	c0 cf       	rjmp	.-128    	; 0x2140 <vfprintf+0x694>
    21c0:	60 96       	adiw	r28, 0x10	; 16
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	ef 90       	pop	r14
    21d2:	df 90       	pop	r13
    21d4:	cf 90       	pop	r12
    21d6:	bf 90       	pop	r11
    21d8:	af 90       	pop	r10
    21da:	9f 90       	pop	r9
    21dc:	8f 90       	pop	r8
    21de:	7f 90       	pop	r7
    21e0:	6f 90       	pop	r6
    21e2:	5f 90       	pop	r5
    21e4:	4f 90       	pop	r4
    21e6:	3f 90       	pop	r3
    21e8:	2f 90       	pop	r2
    21ea:	08 95       	ret

000021ec <__umulhisi3>:
    21ec:	a2 9f       	mul	r26, r18
    21ee:	b0 01       	movw	r22, r0
    21f0:	b3 9f       	mul	r27, r19
    21f2:	c0 01       	movw	r24, r0
    21f4:	a3 9f       	mul	r26, r19
    21f6:	70 0d       	add	r23, r0
    21f8:	81 1d       	adc	r24, r1
    21fa:	11 24       	eor	r1, r1
    21fc:	91 1d       	adc	r25, r1
    21fe:	b2 9f       	mul	r27, r18
    2200:	70 0d       	add	r23, r0
    2202:	81 1d       	adc	r24, r1
    2204:	11 24       	eor	r1, r1
    2206:	91 1d       	adc	r25, r1
    2208:	08 95       	ret

0000220a <__ftoa_engine>:
    220a:	28 30       	cpi	r18, 0x08	; 8
    220c:	08 f0       	brcs	.+2      	; 0x2210 <__ftoa_engine+0x6>
    220e:	27 e0       	ldi	r18, 0x07	; 7
    2210:	33 27       	eor	r19, r19
    2212:	da 01       	movw	r26, r20
    2214:	99 0f       	add	r25, r25
    2216:	31 1d       	adc	r19, r1
    2218:	87 fd       	sbrc	r24, 7
    221a:	91 60       	ori	r25, 0x01	; 1
    221c:	00 96       	adiw	r24, 0x00	; 0
    221e:	61 05       	cpc	r22, r1
    2220:	71 05       	cpc	r23, r1
    2222:	39 f4       	brne	.+14     	; 0x2232 <__ftoa_engine+0x28>
    2224:	32 60       	ori	r19, 0x02	; 2
    2226:	2e 5f       	subi	r18, 0xFE	; 254
    2228:	3d 93       	st	X+, r19
    222a:	30 e3       	ldi	r19, 0x30	; 48
    222c:	2a 95       	dec	r18
    222e:	e1 f7       	brne	.-8      	; 0x2228 <__ftoa_engine+0x1e>
    2230:	08 95       	ret
    2232:	9f 3f       	cpi	r25, 0xFF	; 255
    2234:	30 f0       	brcs	.+12     	; 0x2242 <__ftoa_engine+0x38>
    2236:	80 38       	cpi	r24, 0x80	; 128
    2238:	71 05       	cpc	r23, r1
    223a:	61 05       	cpc	r22, r1
    223c:	09 f0       	breq	.+2      	; 0x2240 <__ftoa_engine+0x36>
    223e:	3c 5f       	subi	r19, 0xFC	; 252
    2240:	3c 5f       	subi	r19, 0xFC	; 252
    2242:	3d 93       	st	X+, r19
    2244:	91 30       	cpi	r25, 0x01	; 1
    2246:	08 f0       	brcs	.+2      	; 0x224a <__ftoa_engine+0x40>
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	91 1d       	adc	r25, r1
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	1f 93       	push	r17
    2252:	0f 93       	push	r16
    2254:	ff 92       	push	r15
    2256:	ef 92       	push	r14
    2258:	19 2f       	mov	r17, r25
    225a:	98 7f       	andi	r25, 0xF8	; 248
    225c:	96 95       	lsr	r25
    225e:	e9 2f       	mov	r30, r25
    2260:	96 95       	lsr	r25
    2262:	96 95       	lsr	r25
    2264:	e9 0f       	add	r30, r25
    2266:	ff 27       	eor	r31, r31
    2268:	e8 51       	subi	r30, 0x18	; 24
    226a:	fd 4f       	sbci	r31, 0xFD	; 253
    226c:	99 27       	eor	r25, r25
    226e:	33 27       	eor	r19, r19
    2270:	ee 24       	eor	r14, r14
    2272:	ff 24       	eor	r15, r15
    2274:	a7 01       	movw	r20, r14
    2276:	e7 01       	movw	r28, r14
    2278:	05 90       	lpm	r0, Z+
    227a:	08 94       	sec
    227c:	07 94       	ror	r0
    227e:	28 f4       	brcc	.+10     	; 0x228a <__ftoa_engine+0x80>
    2280:	36 0f       	add	r19, r22
    2282:	e7 1e       	adc	r14, r23
    2284:	f8 1e       	adc	r15, r24
    2286:	49 1f       	adc	r20, r25
    2288:	51 1d       	adc	r21, r1
    228a:	66 0f       	add	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	06 94       	lsr	r0
    2294:	a1 f7       	brne	.-24     	; 0x227e <__ftoa_engine+0x74>
    2296:	05 90       	lpm	r0, Z+
    2298:	07 94       	ror	r0
    229a:	28 f4       	brcc	.+10     	; 0x22a6 <__ftoa_engine+0x9c>
    229c:	e7 0e       	add	r14, r23
    229e:	f8 1e       	adc	r15, r24
    22a0:	49 1f       	adc	r20, r25
    22a2:	56 1f       	adc	r21, r22
    22a4:	c1 1d       	adc	r28, r1
    22a6:	77 0f       	add	r23, r23
    22a8:	88 1f       	adc	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	66 1f       	adc	r22, r22
    22ae:	06 94       	lsr	r0
    22b0:	a1 f7       	brne	.-24     	; 0x229a <__ftoa_engine+0x90>
    22b2:	05 90       	lpm	r0, Z+
    22b4:	07 94       	ror	r0
    22b6:	28 f4       	brcc	.+10     	; 0x22c2 <__ftoa_engine+0xb8>
    22b8:	f8 0e       	add	r15, r24
    22ba:	49 1f       	adc	r20, r25
    22bc:	56 1f       	adc	r21, r22
    22be:	c7 1f       	adc	r28, r23
    22c0:	d1 1d       	adc	r29, r1
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	66 1f       	adc	r22, r22
    22c8:	77 1f       	adc	r23, r23
    22ca:	06 94       	lsr	r0
    22cc:	a1 f7       	brne	.-24     	; 0x22b6 <__ftoa_engine+0xac>
    22ce:	05 90       	lpm	r0, Z+
    22d0:	07 94       	ror	r0
    22d2:	20 f4       	brcc	.+8      	; 0x22dc <__ftoa_engine+0xd2>
    22d4:	49 0f       	add	r20, r25
    22d6:	56 1f       	adc	r21, r22
    22d8:	c7 1f       	adc	r28, r23
    22da:	d8 1f       	adc	r29, r24
    22dc:	99 0f       	add	r25, r25
    22de:	66 1f       	adc	r22, r22
    22e0:	77 1f       	adc	r23, r23
    22e2:	88 1f       	adc	r24, r24
    22e4:	06 94       	lsr	r0
    22e6:	a9 f7       	brne	.-22     	; 0x22d2 <__ftoa_engine+0xc8>
    22e8:	84 91       	lpm	r24, Z
    22ea:	10 95       	com	r17
    22ec:	17 70       	andi	r17, 0x07	; 7
    22ee:	41 f0       	breq	.+16     	; 0x2300 <__ftoa_engine+0xf6>
    22f0:	d6 95       	lsr	r29
    22f2:	c7 95       	ror	r28
    22f4:	57 95       	ror	r21
    22f6:	47 95       	ror	r20
    22f8:	f7 94       	ror	r15
    22fa:	e7 94       	ror	r14
    22fc:	1a 95       	dec	r17
    22fe:	c1 f7       	brne	.-16     	; 0x22f0 <__ftoa_engine+0xe6>
    2300:	ee e8       	ldi	r30, 0x8E	; 142
    2302:	f2 e0       	ldi	r31, 0x02	; 2
    2304:	68 94       	set
    2306:	15 90       	lpm	r1, Z+
    2308:	15 91       	lpm	r17, Z+
    230a:	35 91       	lpm	r19, Z+
    230c:	65 91       	lpm	r22, Z+
    230e:	95 91       	lpm	r25, Z+
    2310:	05 90       	lpm	r0, Z+
    2312:	7f e2       	ldi	r23, 0x2F	; 47
    2314:	73 95       	inc	r23
    2316:	e1 18       	sub	r14, r1
    2318:	f1 0a       	sbc	r15, r17
    231a:	43 0b       	sbc	r20, r19
    231c:	56 0b       	sbc	r21, r22
    231e:	c9 0b       	sbc	r28, r25
    2320:	d0 09       	sbc	r29, r0
    2322:	c0 f7       	brcc	.-16     	; 0x2314 <__ftoa_engine+0x10a>
    2324:	e1 0c       	add	r14, r1
    2326:	f1 1e       	adc	r15, r17
    2328:	43 1f       	adc	r20, r19
    232a:	56 1f       	adc	r21, r22
    232c:	c9 1f       	adc	r28, r25
    232e:	d0 1d       	adc	r29, r0
    2330:	7e f4       	brtc	.+30     	; 0x2350 <__ftoa_engine+0x146>
    2332:	70 33       	cpi	r23, 0x30	; 48
    2334:	11 f4       	brne	.+4      	; 0x233a <__ftoa_engine+0x130>
    2336:	8a 95       	dec	r24
    2338:	e6 cf       	rjmp	.-52     	; 0x2306 <__ftoa_engine+0xfc>
    233a:	e8 94       	clt
    233c:	01 50       	subi	r16, 0x01	; 1
    233e:	30 f0       	brcs	.+12     	; 0x234c <__ftoa_engine+0x142>
    2340:	08 0f       	add	r16, r24
    2342:	0a f4       	brpl	.+2      	; 0x2346 <__ftoa_engine+0x13c>
    2344:	00 27       	eor	r16, r16
    2346:	02 17       	cp	r16, r18
    2348:	08 f4       	brcc	.+2      	; 0x234c <__ftoa_engine+0x142>
    234a:	20 2f       	mov	r18, r16
    234c:	23 95       	inc	r18
    234e:	02 2f       	mov	r16, r18
    2350:	7a 33       	cpi	r23, 0x3A	; 58
    2352:	28 f0       	brcs	.+10     	; 0x235e <__ftoa_engine+0x154>
    2354:	79 e3       	ldi	r23, 0x39	; 57
    2356:	7d 93       	st	X+, r23
    2358:	2a 95       	dec	r18
    235a:	e9 f7       	brne	.-6      	; 0x2356 <__ftoa_engine+0x14c>
    235c:	10 c0       	rjmp	.+32     	; 0x237e <__ftoa_engine+0x174>
    235e:	7d 93       	st	X+, r23
    2360:	2a 95       	dec	r18
    2362:	89 f6       	brne	.-94     	; 0x2306 <__ftoa_engine+0xfc>
    2364:	06 94       	lsr	r0
    2366:	97 95       	ror	r25
    2368:	67 95       	ror	r22
    236a:	37 95       	ror	r19
    236c:	17 95       	ror	r17
    236e:	17 94       	ror	r1
    2370:	e1 18       	sub	r14, r1
    2372:	f1 0a       	sbc	r15, r17
    2374:	43 0b       	sbc	r20, r19
    2376:	56 0b       	sbc	r21, r22
    2378:	c9 0b       	sbc	r28, r25
    237a:	d0 09       	sbc	r29, r0
    237c:	98 f0       	brcs	.+38     	; 0x23a4 <__ftoa_engine+0x19a>
    237e:	23 95       	inc	r18
    2380:	7e 91       	ld	r23, -X
    2382:	73 95       	inc	r23
    2384:	7a 33       	cpi	r23, 0x3A	; 58
    2386:	08 f0       	brcs	.+2      	; 0x238a <__ftoa_engine+0x180>
    2388:	70 e3       	ldi	r23, 0x30	; 48
    238a:	7c 93       	st	X, r23
    238c:	20 13       	cpse	r18, r16
    238e:	b8 f7       	brcc	.-18     	; 0x237e <__ftoa_engine+0x174>
    2390:	7e 91       	ld	r23, -X
    2392:	70 61       	ori	r23, 0x10	; 16
    2394:	7d 93       	st	X+, r23
    2396:	30 f0       	brcs	.+12     	; 0x23a4 <__ftoa_engine+0x19a>
    2398:	83 95       	inc	r24
    239a:	71 e3       	ldi	r23, 0x31	; 49
    239c:	7d 93       	st	X+, r23
    239e:	70 e3       	ldi	r23, 0x30	; 48
    23a0:	2a 95       	dec	r18
    23a2:	e1 f7       	brne	.-8      	; 0x239c <__ftoa_engine+0x192>
    23a4:	11 24       	eor	r1, r1
    23a6:	ef 90       	pop	r14
    23a8:	ff 90       	pop	r15
    23aa:	0f 91       	pop	r16
    23ac:	1f 91       	pop	r17
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	99 27       	eor	r25, r25
    23b4:	87 fd       	sbrc	r24, 7
    23b6:	90 95       	com	r25
    23b8:	08 95       	ret

000023ba <strnlen_P>:
    23ba:	fc 01       	movw	r30, r24
    23bc:	05 90       	lpm	r0, Z+
    23be:	61 50       	subi	r22, 0x01	; 1
    23c0:	70 40       	sbci	r23, 0x00	; 0
    23c2:	01 10       	cpse	r0, r1
    23c4:	d8 f7       	brcc	.-10     	; 0x23bc <strnlen_P+0x2>
    23c6:	80 95       	com	r24
    23c8:	90 95       	com	r25
    23ca:	8e 0f       	add	r24, r30
    23cc:	9f 1f       	adc	r25, r31
    23ce:	08 95       	ret

000023d0 <memcpy>:
    23d0:	fb 01       	movw	r30, r22
    23d2:	dc 01       	movw	r26, r24
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <memcpy+0xa>
    23d6:	01 90       	ld	r0, Z+
    23d8:	0d 92       	st	X+, r0
    23da:	41 50       	subi	r20, 0x01	; 1
    23dc:	50 40       	sbci	r21, 0x00	; 0
    23de:	d8 f7       	brcc	.-10     	; 0x23d6 <memcpy+0x6>
    23e0:	08 95       	ret

000023e2 <strnlen>:
    23e2:	fc 01       	movw	r30, r24
    23e4:	61 50       	subi	r22, 0x01	; 1
    23e6:	70 40       	sbci	r23, 0x00	; 0
    23e8:	01 90       	ld	r0, Z+
    23ea:	01 10       	cpse	r0, r1
    23ec:	d8 f7       	brcc	.-10     	; 0x23e4 <strnlen+0x2>
    23ee:	80 95       	com	r24
    23f0:	90 95       	com	r25
    23f2:	8e 0f       	add	r24, r30
    23f4:	9f 1f       	adc	r25, r31
    23f6:	08 95       	ret

000023f8 <fputc>:
    23f8:	0f 93       	push	r16
    23fa:	1f 93       	push	r17
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	fb 01       	movw	r30, r22
    2402:	23 81       	ldd	r18, Z+3	; 0x03
    2404:	21 fd       	sbrc	r18, 1
    2406:	03 c0       	rjmp	.+6      	; 0x240e <fputc+0x16>
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	9f ef       	ldi	r25, 0xFF	; 255
    240c:	2c c0       	rjmp	.+88     	; 0x2466 <fputc+0x6e>
    240e:	22 ff       	sbrs	r18, 2
    2410:	16 c0       	rjmp	.+44     	; 0x243e <fputc+0x46>
    2412:	46 81       	ldd	r20, Z+6	; 0x06
    2414:	57 81       	ldd	r21, Z+7	; 0x07
    2416:	24 81       	ldd	r18, Z+4	; 0x04
    2418:	35 81       	ldd	r19, Z+5	; 0x05
    241a:	42 17       	cp	r20, r18
    241c:	53 07       	cpc	r21, r19
    241e:	44 f4       	brge	.+16     	; 0x2430 <fputc+0x38>
    2420:	a0 81       	ld	r26, Z
    2422:	b1 81       	ldd	r27, Z+1	; 0x01
    2424:	9d 01       	movw	r18, r26
    2426:	2f 5f       	subi	r18, 0xFF	; 255
    2428:	3f 4f       	sbci	r19, 0xFF	; 255
    242a:	20 83       	st	Z, r18
    242c:	31 83       	std	Z+1, r19	; 0x01
    242e:	8c 93       	st	X, r24
    2430:	26 81       	ldd	r18, Z+6	; 0x06
    2432:	37 81       	ldd	r19, Z+7	; 0x07
    2434:	2f 5f       	subi	r18, 0xFF	; 255
    2436:	3f 4f       	sbci	r19, 0xFF	; 255
    2438:	26 83       	std	Z+6, r18	; 0x06
    243a:	37 83       	std	Z+7, r19	; 0x07
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <fputc+0x6e>
    243e:	8b 01       	movw	r16, r22
    2440:	ec 01       	movw	r28, r24
    2442:	fb 01       	movw	r30, r22
    2444:	00 84       	ldd	r0, Z+8	; 0x08
    2446:	f1 85       	ldd	r31, Z+9	; 0x09
    2448:	e0 2d       	mov	r30, r0
    244a:	19 95       	eicall
    244c:	89 2b       	or	r24, r25
    244e:	e1 f6       	brne	.-72     	; 0x2408 <fputc+0x10>
    2450:	d8 01       	movw	r26, r16
    2452:	16 96       	adiw	r26, 0x06	; 6
    2454:	8d 91       	ld	r24, X+
    2456:	9c 91       	ld	r25, X
    2458:	17 97       	sbiw	r26, 0x07	; 7
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	16 96       	adiw	r26, 0x06	; 6
    245e:	8d 93       	st	X+, r24
    2460:	9c 93       	st	X, r25
    2462:	17 97       	sbiw	r26, 0x07	; 7
    2464:	ce 01       	movw	r24, r28
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	08 95       	ret

00002470 <printf>:
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	ae 01       	movw	r20, r28
    247a:	4a 5f       	subi	r20, 0xFA	; 250
    247c:	5f 4f       	sbci	r21, 0xFF	; 255
    247e:	fa 01       	movw	r30, r20
    2480:	61 91       	ld	r22, Z+
    2482:	71 91       	ld	r23, Z+
    2484:	af 01       	movw	r20, r30
    2486:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <__iob+0x2>
    248a:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <__iob+0x3>
    248e:	0e 94 56 0d 	call	0x1aac	; 0x1aac <vfprintf>
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <__ultoa_invert>:
    2498:	fa 01       	movw	r30, r20
    249a:	aa 27       	eor	r26, r26
    249c:	28 30       	cpi	r18, 0x08	; 8
    249e:	51 f1       	breq	.+84     	; 0x24f4 <__ultoa_invert+0x5c>
    24a0:	20 31       	cpi	r18, 0x10	; 16
    24a2:	81 f1       	breq	.+96     	; 0x2504 <__ultoa_invert+0x6c>
    24a4:	e8 94       	clt
    24a6:	6f 93       	push	r22
    24a8:	6e 7f       	andi	r22, 0xFE	; 254
    24aa:	6e 5f       	subi	r22, 0xFE	; 254
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	af 4f       	sbci	r26, 0xFF	; 255
    24b4:	b1 e0       	ldi	r27, 0x01	; 1
    24b6:	3e d0       	rcall	.+124    	; 0x2534 <__ultoa_invert+0x9c>
    24b8:	b4 e0       	ldi	r27, 0x04	; 4
    24ba:	3c d0       	rcall	.+120    	; 0x2534 <__ultoa_invert+0x9c>
    24bc:	67 0f       	add	r22, r23
    24be:	78 1f       	adc	r23, r24
    24c0:	89 1f       	adc	r24, r25
    24c2:	9a 1f       	adc	r25, r26
    24c4:	a1 1d       	adc	r26, r1
    24c6:	68 0f       	add	r22, r24
    24c8:	79 1f       	adc	r23, r25
    24ca:	8a 1f       	adc	r24, r26
    24cc:	91 1d       	adc	r25, r1
    24ce:	a1 1d       	adc	r26, r1
    24d0:	6a 0f       	add	r22, r26
    24d2:	71 1d       	adc	r23, r1
    24d4:	81 1d       	adc	r24, r1
    24d6:	91 1d       	adc	r25, r1
    24d8:	a1 1d       	adc	r26, r1
    24da:	20 d0       	rcall	.+64     	; 0x251c <__ultoa_invert+0x84>
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <__ultoa_invert+0x48>
    24de:	68 94       	set
    24e0:	3f 91       	pop	r19
    24e2:	2a e0       	ldi	r18, 0x0A	; 10
    24e4:	26 9f       	mul	r18, r22
    24e6:	11 24       	eor	r1, r1
    24e8:	30 19       	sub	r19, r0
    24ea:	30 5d       	subi	r19, 0xD0	; 208
    24ec:	31 93       	st	Z+, r19
    24ee:	de f6       	brtc	.-74     	; 0x24a6 <__ultoa_invert+0xe>
    24f0:	cf 01       	movw	r24, r30
    24f2:	08 95       	ret
    24f4:	46 2f       	mov	r20, r22
    24f6:	47 70       	andi	r20, 0x07	; 7
    24f8:	40 5d       	subi	r20, 0xD0	; 208
    24fa:	41 93       	st	Z+, r20
    24fc:	b3 e0       	ldi	r27, 0x03	; 3
    24fe:	0f d0       	rcall	.+30     	; 0x251e <__ultoa_invert+0x86>
    2500:	c9 f7       	brne	.-14     	; 0x24f4 <__ultoa_invert+0x5c>
    2502:	f6 cf       	rjmp	.-20     	; 0x24f0 <__ultoa_invert+0x58>
    2504:	46 2f       	mov	r20, r22
    2506:	4f 70       	andi	r20, 0x0F	; 15
    2508:	40 5d       	subi	r20, 0xD0	; 208
    250a:	4a 33       	cpi	r20, 0x3A	; 58
    250c:	18 f0       	brcs	.+6      	; 0x2514 <__ultoa_invert+0x7c>
    250e:	49 5d       	subi	r20, 0xD9	; 217
    2510:	31 fd       	sbrc	r19, 1
    2512:	40 52       	subi	r20, 0x20	; 32
    2514:	41 93       	st	Z+, r20
    2516:	02 d0       	rcall	.+4      	; 0x251c <__ultoa_invert+0x84>
    2518:	a9 f7       	brne	.-22     	; 0x2504 <__ultoa_invert+0x6c>
    251a:	ea cf       	rjmp	.-44     	; 0x24f0 <__ultoa_invert+0x58>
    251c:	b4 e0       	ldi	r27, 0x04	; 4
    251e:	a6 95       	lsr	r26
    2520:	97 95       	ror	r25
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	ba 95       	dec	r27
    252a:	c9 f7       	brne	.-14     	; 0x251e <__ultoa_invert+0x86>
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	61 05       	cpc	r22, r1
    2530:	71 05       	cpc	r23, r1
    2532:	08 95       	ret
    2534:	9b 01       	movw	r18, r22
    2536:	ac 01       	movw	r20, r24
    2538:	0a 2e       	mov	r0, r26
    253a:	06 94       	lsr	r0
    253c:	57 95       	ror	r21
    253e:	47 95       	ror	r20
    2540:	37 95       	ror	r19
    2542:	27 95       	ror	r18
    2544:	ba 95       	dec	r27
    2546:	c9 f7       	brne	.-14     	; 0x253a <__ultoa_invert+0xa2>
    2548:	62 0f       	add	r22, r18
    254a:	73 1f       	adc	r23, r19
    254c:	84 1f       	adc	r24, r20
    254e:	95 1f       	adc	r25, r21
    2550:	a0 1d       	adc	r26, r0
    2552:	08 95       	ret

00002554 <_exit>:
    2554:	f8 94       	cli

00002556 <__stop_program>:
    2556:	ff cf       	rjmp	.-2      	; 0x2556 <__stop_program>
